{
  "results": [
    {
      "nl": "총 가격이 10000원 이상인 모든 주문을 조회하시오.",
      "sql": "SELECT * FROM 음식_배달 WHERE total_price >= 10000",
      "dml": "SELECT",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "total_price"
      ],
      "matched_fields": []
    },
    {
      "nl": "배달 상태가 '배송중'인 주문의 주문 ID와 고객 이름을 가져오시오.",
      "sql": "SELECT order_id, customer_name FROM 음식_배달 WHERE order_status = '배송중'",
      "dml": "SELECT",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "order_status",
        "customer_name"
      ],
      "matched_fields": [
        "order_id"
      ]
    },
    {
      "nl": "주문 수량이 3개 이상인 주문의 평균 평점을 구하시오.",
      "sql": "SELECT AVG(rating) FROM 음식_배달 WHERE quantity >= 3",
      "dml": "SELECT",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "rating",
        "quantity"
      ],
      "matched_fields": []
    },
    {
      "nl": "결제 상태가 '완료'인 주문 중에서 배달비가 5000원 이하인 주문을 찾으시오.",
      "sql": "SELECT * FROM 음식_배달 WHERE payment_status = '완료' AND delivery_fee <= 5000",
      "dml": "SELECT",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "payment_status",
        "delivery_fee"
      ],
      "matched_fields": []
    },
    {
      "nl": "주문 날짜가 2023년 10월 1일 이후인 모든 주문의 총 가격을 합산하시오.",
      "sql": "SELECT SUM(total_price) FROM 음식_배달 WHERE order_date > '2023-10-01'",
      "dml": "SELECT",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "order_date",
        "total_price"
      ],
      "matched_fields": []
    },
    {
      "nl": "평점이 4.0 이상인 주문의 고객 이름과 피드백을 조회하시오.",
      "sql": "SELECT customer_name, feedback FROM 음식_배달 WHERE rating >= 4.0",
      "dml": "SELECT",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "rating",
        "customer_name",
        "feedback"
      ],
      "matched_fields": []
    },
    {
      "nl": "배달원 ID가 2인 주문의 주문 수량의 합계를 구하시오.",
      "sql": "SELECT SUM(quantity) FROM 음식_배달 WHERE delivery_person_id = 2",
      "dml": "SELECT",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "delivery_person_id",
        "quantity"
      ],
      "matched_fields": []
    },
    {
      "nl": "배달 비용이 2000원 이상이고 주문 상태가 '주문완료'인 주문을 조회하시오.",
      "sql": "SELECT * FROM 음식_배달 WHERE delivery_fee >= 2000 AND order_status = '주문완료'",
      "dml": "SELECT",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "order_status",
        "delivery_fee"
      ],
      "matched_fields": []
    },
    {
      "nl": "2023년 10월 1일부터 현재까지의 주문 평균 가격을 계산하시오.",
      "sql": "SELECT AVG(total_price) FROM 음식_배달 WHERE order_date >= '2023-10-01'",
      "dml": "SELECT",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "order_date",
        "total_price"
      ],
      "matched_fields": []
    },
    {
      "nl": "레스토랑 이름이 'Pizza Hut'인 주문 중에서 결제 상태가 '대기'인 주문의 주문 ID를 조회하시오.",
      "sql": "SELECT order_id FROM 음식_배달 WHERE restaurant_name = 'Pizza Hut' AND payment_status = '대기'",
      "dml": "SELECT",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "restaurant_name",
        "payment_status"
      ],
      "matched_fields": [
        "order_id"
      ]
    },
    {
      "nl": "사용자 ID가 5인 고객이 주문한 음식의 총 가격이 30.00보다 큰 주문을 추가해줘.",
      "sql": "INSERT INTO 음식_배달 (user_id, total_price) VALUES (5, 35.00);",
      "dml": "INSERT",
      "db_success": true,
      "db_error": null,
      "missing_fields": [],
      "matched_fields": []
    },
    {
      "nl": "배달 상태가 '배송중'인 주문의 수량이 2 이상인 주문을 추가해줘.",
      "sql": "INSERT INTO 음식_배달 (order_status, quantity) VALUES ('배송중', 2);",
      "dml": "INSERT",
      "db_success": true,
      "db_error": null,
      "missing_fields": [],
      "matched_fields": []
    },
    {
      "nl": "레스토랑 ID가 3이고, 결제 상태가 '완료'인 주문을 추가해줘.",
      "sql": "INSERT INTO 음식_배달 (restaurant_id, payment_status) VALUES (3, '완료');",
      "dml": "INSERT",
      "db_success": true,
      "db_error": null,
      "missing_fields": [],
      "matched_fields": []
    },
    {
      "nl": "주문 날짜가 2023년 10월 1일 이후인 주문을 추가해줘.",
      "sql": "INSERT INTO 음식_배달 (order_date) VALUES ('2023-10-02 12:00:00');",
      "dml": "INSERT",
      "db_success": true,
      "db_error": null,
      "missing_fields": [],
      "matched_fields": []
    },
    {
      "nl": "고객 평점이 4.5 이상인 주문을 추가해줘.",
      "sql": "INSERT INTO 음식_배달 (rating) VALUES (4.6);",
      "dml": "INSERT",
      "db_success": true,
      "db_error": null,
      "missing_fields": [],
      "matched_fields": []
    },
    {
      "nl": "배달 비용이 5.00 이하인 주문을 추가해줘.",
      "sql": "INSERT INTO 음식_배달 (delivery_fee) VALUES (4.99);",
      "dml": "INSERT",
      "db_success": true,
      "db_error": null,
      "missing_fields": [],
      "matched_fields": []
    },
    {
      "nl": "결제 상태가 '대기'이고, 총 가격이 20.00 이상인 주문을 추가해줘.",
      "sql": "INSERT INTO 음식_배달 (payment_status, total_price) VALUES ('대기', 25.00);",
      "dml": "INSERT",
      "db_success": true,
      "db_error": null,
      "missing_fields": [],
      "matched_fields": []
    },
    {
      "nl": "주문 상태가 '취소'인 주문의 수량이 1 미만인 주문을 추가해줘.",
      "sql": "INSERT INTO 음식_배달 (order_status, quantity) VALUES ('취소', 0);",
      "dml": "INSERT",
      "db_success": true,
      "db_error": null,
      "missing_fields": [],
      "matched_fields": []
    },
    {
      "nl": "레스토랑 이름이 '피자'인 주문을 추가해줘.",
      "sql": "INSERT INTO 음식_배달 (restaurant_name) VALUES ('피자');",
      "dml": "INSERT",
      "db_success": true,
      "db_error": null,
      "missing_fields": [],
      "matched_fields": []
    },
    {
      "nl": "고객 이름이 '홍길동'이고, 배송 주소가 '서울'인 주문을 추가해줘.",
      "sql": "INSERT INTO 음식_배달 (customer_name, delivery_address) VALUES ('홍길동', '서울');",
      "dml": "INSERT",
      "db_success": true,
      "db_error": null,
      "missing_fields": [],
      "matched_fields": []
    },
    {
      "nl": "주문 상태가 '배송중'인 모든 주문의 배달 비용을 3000으로 업데이트 해주세요.",
      "sql": "UPDATE 음식_배달 SET delivery_fee = 3000 WHERE order_status = '배송중';",
      "dml": "UPDATE",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "order_status",
        "delivery_fee"
      ],
      "matched_fields": []
    },
    {
      "nl": "총 가격이 50000 이상인 주문의 결제 상태를 '완료'로 변경하세요.",
      "sql": "UPDATE 음식_배달 SET payment_status = '완료' WHERE total_price >= 50000;",
      "dml": "UPDATE",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "total_price",
        "payment_status"
      ],
      "matched_fields": []
    },
    {
      "nl": "평점이 4.5 이하인 주문의 피드백을 '만족스럽지 못했습니다.'로 수정해주세요.",
      "sql": "UPDATE 음식_배달 SET feedback = '만족스럽지 못했습니다.' WHERE rating <= 4.5;",
      "dml": "UPDATE",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "rating",
        "feedback"
      ],
      "matched_fields": []
    },
    {
      "nl": "주문 수량이 3 이상인 주문의 배송 주소를 '서울시 강남구'로 업데이트 해주세요.",
      "sql": "UPDATE 음식_배달 SET delivery_address = '서울시 강남구' WHERE quantity >= 3;",
      "dml": "UPDATE",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "quantity"
      ],
      "matched_fields": [
        "delivery_address"
      ]
    },
    {
      "nl": "주문 상태가 '취소'인 주문의 활성 여부를 FALSE로 변경해주세요.",
      "sql": "UPDATE 음식_배달 SET is_active = FALSE WHERE order_status = '취소';",
      "dml": "UPDATE",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "is_active",
        "order_status"
      ],
      "matched_fields": []
    },
    {
      "nl": "결제 상태가 '대기'인 모든 주문의 총 가격을 0으로 설정하세요.",
      "sql": "UPDATE 음식_배달 SET total_price = 0 WHERE payment_status = '대기';",
      "dml": "UPDATE",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "total_price",
        "payment_status"
      ],
      "matched_fields": []
    },
    {
      "nl": "배달원 ID가 5인 주문의 배송 시간에 현재 시간을 추가해주세요.",
      "sql": "UPDATE 음식_배달 SET delivery_time = NOW() WHERE delivery_person_id = 5;",
      "dml": "UPDATE",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "delivery_time",
        "delivery_person_id"
      ],
      "matched_fields": []
    },
    {
      "nl": "고객 이름이 '김철수'인 주문의 평점을 5.0으로 수정하세요.",
      "sql": "UPDATE 음식_배달 SET rating = 5.0 WHERE customer_name = '김철수';",
      "dml": "UPDATE",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "rating",
        "customer_name"
      ],
      "matched_fields": []
    },
    {
      "nl": "레스토랑 이름이 '이탈리안 레스토랑'인 주문의 주문 상태를 '배송완료'로 변경해 주세요.",
      "sql": "UPDATE 음식_배달 SET order_status = '배송완료' WHERE restaurant_name = '이탈리안 레스토랑';",
      "dml": "UPDATE",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "restaurant_name",
        "order_status"
      ],
      "matched_fields": []
    },
    {
      "nl": "주문 날짜가 2023년 1월 1일 이전인 모든 주문의 결제 상태를 '취소'로 설정하세요.",
      "sql": "UPDATE 음식_배달 SET payment_status = '취소' WHERE order_date < '2023-01-01';",
      "dml": "UPDATE",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "order_date",
        "payment_status"
      ],
      "matched_fields": []
    },
    {
      "nl": "주문 상태가 '취소'인 모든 주문을 삭제해줘.",
      "sql": "DELETE FROM 음식_배달 WHERE order_status = '취소';",
      "dml": "DELETE",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "order_status"
      ],
      "matched_fields": []
    },
    {
      "nl": "총 가격이 50000원 이하인 주문을 삭제하고 싶어.",
      "sql": "DELETE FROM 음식_배달 WHERE total_price <= 50000;",
      "dml": "DELETE",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "total_price"
      ],
      "matched_fields": []
    },
    {
      "nl": "배달원 ID가 3인 주문 중에서 배송 완료된 주문을 삭제해줘.",
      "sql": "DELETE FROM 음식_배달 WHERE delivery_person_id = 3 AND order_status = '배송완료';",
      "dml": "DELETE",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "order_status",
        "delivery_person_id"
      ],
      "matched_fields": []
    },
    {
      "nl": "주문 날짜가 2023년 1월 1일 이전인 모든 주문을 삭제해줘.",
      "sql": "DELETE FROM 음식_배달 WHERE order_date < '2023-01-01';",
      "dml": "DELETE",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "order_date"
      ],
      "matched_fields": []
    },
    {
      "nl": "사용자 ID가 5인 주문 중에서 피드백이 없는 주문을 삭제해줘.",
      "sql": "DELETE FROM 음식_배달 WHERE user_id = 5 AND feedback IS NULL;",
      "dml": "DELETE",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "feedback"
      ],
      "matched_fields": [
        "user_id"
      ]
    },
    {
      "nl": "배달 비용이 2000원 이하인 활성 주문을 삭제하고 싶어.",
      "sql": "DELETE FROM 음식_배달 WHERE delivery_fee <= 2000 AND is_active = TRUE;",
      "dml": "DELETE",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "is_active",
        "delivery_fee"
      ],
      "matched_fields": []
    },
    {
      "nl": "평점이 2.0 이하인 모든 주문을 삭제해줘.",
      "sql": "DELETE FROM 음식_배달 WHERE rating <= 2.0;",
      "dml": "DELETE",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "rating"
      ],
      "matched_fields": []
    },
    {
      "nl": "배송 시간이 현재 시간보다 과거인 주문 중에서 주문 상태가 '배송중'인 주문을 삭제해줘.",
      "sql": "DELETE FROM 음식_배달 WHERE delivery_time < NOW() AND order_status = '배송중';",
      "dml": "DELETE",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "order_status",
        "delivery_time"
      ],
      "matched_fields": []
    },
    {
      "nl": "고객 이름이 '홍길동'인 모든 주문을 삭제하고 싶어.",
      "sql": "DELETE FROM 음식_배달 WHERE customer_name = '홍길동';",
      "dml": "DELETE",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "customer_name"
      ],
      "matched_fields": []
    },
    {
      "nl": "상태가 '완료'인 주문 중에서 주문 수량이 3 이상인 주문을 삭제해줘.",
      "sql": "DELETE FROM 음식_배달 WHERE status = '완료' AND quantity >= 3;",
      "dml": "DELETE",
      "db_success": true,
      "db_error": null,
      "missing_fields": [
        "status",
        "quantity"
      ],
      "matched_fields": []
    }
  ]
}