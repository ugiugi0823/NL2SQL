[
  {
    "query": "김철수의 항공편 좌석을 비상구 좌석으로 변경해줘",
    "level": "Intermediate",
    "type": "UPDATE",
    "sql": "UPDATE sample SET seat_number='EXIT' WHERE passenger_name='김철수'",
    "retry_count": 1
  },
  {
    "query": "동일한 편명으로 중복된 예약을 삭제해줘",
    "level": "Basic",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE id NOT IN (SELECT MIN(id) FROM sample GROUP BY flight_number)",
    "retry_count": 1
  },
  {
    "query": "지난 6개월 동안 사용되지 않은 항공권을 삭제해줘",
    "level": "Advanced",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE updated_at < datetime('now', '-6 months')",
    "retry_count": 1
  },
  {
    "query": "가격이 가장 낮은 항공권의 항공편 번호와 출발지를 3개 보여줘",
    "level": "Basic",
    "type": "SELECT",
    "sql": "SELECT flight_number, departure_airport FROM sample ORDER BY ticket_price ASC LIMIT 3",
    "retry_count": 1
  },
  {
    "query": "결제된 금액을 250,000원으로 업데이트 해줘",
    "level": "Expert",
    "type": "UPDATE",
    "sql": "UPDATE sample SET ticket_price=250000 WHERE payment_status='결제 완료'",
    "retry_count": 1
  },
  {
    "query": "승객 이름을 홍길동에서 김철수로 변경해줘",
    "level": "Expert",
    "type": "UPDATE",
    "sql": "UPDATE sample SET passenger_name='김철수' WHERE passenger_name='홍길동'",
    "retry_count": 1
  },
  {
    "query": "승객의 나이에 따른 평균 예약 금액을 구하고, 평균 금액이 500달러 이상인 그룹만 표시해줘",
    "level": "Expert",
    "type": "SELECT",
    "sql": "SELECT passenger_id, AVG(ticket_price) AS average_price FROM sample WHERE currency = 'USD' GROUP BY passenger_id HAVING average_price >= 500",
    "retry_count": 1
  },
  {
    "query": "항공편 번호 1234의 도착 시간을 오후 3시로 변경해줘",
    "level": "Basic",
    "type": "UPDATE",
    "sql": "UPDATE sample SET arrival_time='15:00:00' WHERE flight_number='1234'",
    "retry_count": 1
  },
  {
    "query": "취소된 항공권 예약 기록을 삭제해 주세요",
    "level": "Intermediate",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE payment_status = '취소됨'",
    "retry_count": 1
  },
  {
    "query": "승객 김민수의 좌석을 12A로 변경해줘",
    "level": "Basic",
    "type": "UPDATE",
    "sql": "UPDATE sample SET seat_number='12A' WHERE passenger_name='김민수'",
    "retry_count": 1
  },
  {
    "query": "예약 상태를 확정에서 취소로 수정해줘",
    "level": "Expert",
    "type": "UPDATE",
    "sql": "UPDATE sample SET payment_status='취소' WHERE payment_status='확정'",
    "retry_count": 1
  },
  {
    "query": "출발 날짜가 지난 예약을 삭제해줘",
    "level": "Basic",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE departure_date < DATE('now')",
    "retry_count": 1
  },
  {
    "query": "예약 번호 789의 좌석을 창가 쪽으로 바꿔줘",
    "level": "Advanced",
    "type": "UPDATE",
    "sql": "UPDATE sample SET seat_number='A' WHERE booking_reference='789'",
    "retry_count": 1
  },
  {
    "query": "결제가 실패한 예약을 삭제해줘",
    "level": "Advanced",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE payment_status = '실패'",
    "retry_count": 1
  },
  {
    "query": "3개월 이상 지난 예약 내역을 삭제해 주세요",
    "level": "Intermediate",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE departure_date < date('now', '-3 months')",
    "retry_count": 1
  },
  {
    "query": "고객 홍길동의 연락처를 새로운 번호로 업데이트해줘",
    "level": "Intermediate",
    "type": "UPDATE",
    "sql": "UPDATE sample SET passenger_name='홍길동' WHERE passenger_name='홍길동'",
    "retry_count": 1
  },
  {
    "query": "승객 수가 100명 이상인 항공편의 평균 예약 금액을 계산하세요",
    "level": "Intermediate",
    "type": "SELECT",
    "sql": "SELECT AVG(ticket_price) FROM sample WHERE flight_number IN (SELECT flight_number FROM sample GROUP BY flight_number HAVING COUNT(DISTINCT passenger_id) >= 100)",
    "retry_count": 1
  },
  {
    "query": "결제 ID가 101112인 결제의 금액을 150,000원으로 업데이트해줘",
    "level": "Advanced",
    "type": "UPDATE",
    "sql": "UPDATE sample SET ticket_price=150000 WHERE id=101112",
    "retry_count": 1
  },
  {
    "query": "탑승 시간이 지난 예약 정보를 삭제하세요",
    "level": "Intermediate",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE datetime(departure_date || ' ' || departure_time) < datetime('now')",
    "retry_count": 1
  },
  {
    "query": "취소된 예약 정보를 모두 삭제해 줘",
    "level": "Expert",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE payment_status = '취소됨'",
    "retry_count": 1
  },
  {
    "query": "이용할 항공편의 출발 시간을 오후 3시로 조정해줘",
    "level": "Intermediate",
    "type": "UPDATE",
    "sql": "UPDATE sample SET departure_time='15:00:00'",
    "retry_count": 1
  },
  {
    "query": "예약 번호 12345의 결제 상태를 '완료'로 수정해줘",
    "level": "Intermediate",
    "type": "UPDATE",
    "sql": "UPDATE sample SET payment_status='완료' WHERE booking_reference='12345'",
    "retry_count": 1
  },
  {
    "query": "비즈니스 클래스 좌석이 있는 항공편을 출발 시간 순으로 10개 보여주세요",
    "level": "Intermediate",
    "type": "SELECT",
    "sql": "SELECT * FROM sample WHERE class = '비즈니스' ORDER BY departure_time LIMIT 10",
    "retry_count": 1
  },
  {
    "query": "비즈니스 클래스 좌석을 예약한 승객들의 이름을 알파벳 순으로 보여줘",
    "level": "Expert",
    "type": "SELECT",
    "sql": "SELECT passenger_name FROM sample WHERE class = '비즈니스' ORDER BY passenger_name ASC",
    "retry_count": 1
  },
  {
    "query": "좌석 배정 정보를 시스템에 삽입해줘",
    "level": "Advanced",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, flight_number, departure_date, departure_time, arrival_date, arrival_time, departure_airport, arrival_airport, passenger_id, passenger_name, seat_number, ticket_price, currency, payment_status, booking_reference, baggage_allowance, class, meal_preference, special_requests) VALUES (1, '2023-10-01 10:00:00', '2023-10-01 10:00:00', 'AB123', '2023-10-15', '08:00:00', '2023-10-15', '12:00:00', 'ICN', 'JFK', 101, 'John Doe', '12A', 500.00, 'USD', 'Paid', 'BR123456789', 20, 'Economy', 'Vegetarian', 'Window seat')",
    "retry_count": 4
  },
  {
    "query": "항공편 AA100의 좌석 등급을 비즈니스석으로 변경해줘",
    "level": "Expert",
    "type": "UPDATE",
    "sql": "UPDATE sample SET class='비즈니스석' WHERE flight_number='AA100'",
    "retry_count": 1
  },
  {
    "query": "항공편 코드가 'A123'인 항공편의 출발 시간을 오후 3시로 변경해줘",
    "level": "Advanced",
    "type": "UPDATE",
    "sql": "UPDATE sample SET departure_time='15:00:00' WHERE flight_number='A123'",
    "retry_count": 1
  },
  {
    "query": "새로운 승객 정보를 시스템에 등록해줘",
    "level": "Basic",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, flight_number, departure_date, departure_time, arrival_date, arrival_time, departure_airport, arrival_airport, passenger_id, passenger_name, seat_number, ticket_price, currency, payment_status, booking_reference, baggage_allowance, class, meal_preference, special_requests) VALUES (NULL, '2023-10-01 10:00:00', '2023-10-01 10:00:00', 'AB123', '2023-10-15', '08:00:00', '2023-10-15', '12:00:00', 'ICN', 'JFK', 1, '홍길동', '12A', 1000.00, 'USD', 'Paid', 'BR123456', 20, 'Economy', 'Vegetarian', 'None')",
    "retry_count": 1
  },
  {
    "query": "다음 주말 출발하는 항공편 일정을 시스템에 추가해줘",
    "level": "Expert",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, flight_number, departure_date, departure_time, arrival_date, arrival_time, departure_airport, arrival_airport, passenger_id, passenger_name, seat_number, ticket_price, currency, payment_status, booking_reference, baggage_allowance, class, meal_preference, special_requests) VALUES (1, '2023-10-01 10:00:00', '2023-10-01 10:00:00', 'AB123', '2023-10-07', '10:00:00', '2023-10-07', '14:00:00', 'ICN', 'JFK', 101, 'John Doe', '12A', 500.00, 'USD', 'Paid', 'BR123456789', 20, 'Economy', 'Vegetarian', 'None')",
    "retry_count": 1
  },
  {
    "query": "홍길동의 수하물 정보를 20kg으로 수정해줘",
    "level": "Basic",
    "type": "UPDATE",
    "sql": "UPDATE sample SET baggage_allowance=20 WHERE passenger_name='홍길동'",
    "retry_count": 1
  },
  {
    "query": "가장 인기 있는 출발 도시를 찾고 그 도시에서 출발하는 항공편의 개수를 보여줘",
    "level": "Expert",
    "type": "SELECT",
    "sql": "SELECT departure_airport, COUNT(*) AS flight_count FROM sample GROUP BY departure_airport ORDER BY flight_count DESC LIMIT 1",
    "retry_count": 1
  },
  {
    "query": "만료된 결제 정보를 삭제해줘",
    "level": "Expert",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE payment_status = 'expired'",
    "retry_count": 1
  },
  {
    "query": "2022년에 결제된 예약의 총 결제 금액을 월별로 합산하여 보여줘",
    "level": "Advanced",
    "type": "SELECT",
    "sql": "SELECT strftime('%Y-%m', created_at) AS month, SUM(ticket_price) FROM sample WHERE strftime('%Y', created_at) = '2022' AND payment_status = 'Paid' GROUP BY month",
    "retry_count": 1
  },
  {
    "query": "새로운 승객 정보를 예약 시스템에 등록해줘",
    "level": "Advanced",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, flight_number, departure_date, departure_time, arrival_date, arrival_time, departure_airport, arrival_airport, passenger_id, passenger_name, seat_number, ticket_price, currency, payment_status, booking_reference, baggage_allowance, class, meal_preference, special_requests) VALUES (1, '2023-10-01 10:00:00', '2023-10-01 10:00:00', 'AB123', '2023-10-15', '08:00:00', '2023-10-15', '12:00:00', 'ICN', 'JFK', 101, 'John Doe', '12A', 500.00, 'USD', 'Paid', 'BR123456', 20, 'Economy', 'Vegetarian', 'None')",
    "retry_count": 1
  },
  {
    "query": "결제가 완료되지 않은 항공편 예약을 삭제해 주세요",
    "level": "Intermediate",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE payment_status != 'Completed'",
    "retry_count": 1
  },
  {
    "query": "승객 ID가 456인 승객의 예약 상태를 '확정'으로 수정해줘",
    "level": "Advanced",
    "type": "UPDATE",
    "sql": "UPDATE sample SET payment_status='확정' WHERE passenger_id=456",
    "retry_count": 1
  },
  {
    "query": "항공편 스케줄을 데이터베이스에 추가해줘",
    "level": "Advanced",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, flight_number, departure_date, departure_time, arrival_date, arrival_time, departure_airport, arrival_airport, passenger_id, passenger_name, seat_number, ticket_price, currency, payment_status, booking_reference, baggage_allowance, class, meal_preference, special_requests) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
    "retry_count": 5,
    "error_msg": "Incorrect number of bindings supplied. The current statement uses 21, and there are 0 supplied."
  },
  {
    "query": "출발지가 '서울'인 예약을 삭제해줘",
    "level": "Basic",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE departure_airport = 'ICN'",
    "retry_count": 1
  },
  {
    "query": "좌석 등급별로 평균 요금을 계산하여 50달러 이상인 등급의 평균 요금을 내림차순으로 정렬하여 보여줘",
    "level": "Advanced",
    "type": "SELECT",
    "sql": "SELECT class, AVG(ticket_price) AS average_price FROM sample GROUP BY class HAVING average_price > 50 ORDER BY average_price DESC",
    "retry_count": 1
  },
  {
    "query": "2023년 1월 이후 출발하는 항공편 중 가장 저렴한 항공편의 정보를 조회하세요",
    "level": "Intermediate",
    "type": "SELECT",
    "sql": "SELECT * FROM sample WHERE departure_date >= '2023-01-01' ORDER BY ticket_price ASC LIMIT 1",
    "retry_count": 1
  },
  {
    "query": "예약 번호 12345의 출발 시간을 15:00으로 수정해줘",
    "level": "Expert",
    "type": "UPDATE",
    "sql": "UPDATE sample SET departure_time='15:00' WHERE booking_reference='12345'",
    "retry_count": 1
  },
  {
    "query": "새 항공편 일정을 데이터베이스에 삽입해줘",
    "level": "Intermediate",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, flight_number, departure_date, departure_time, arrival_date, arrival_time, departure_airport, arrival_airport, passenger_id, passenger_name, seat_number, ticket_price, currency, payment_status, booking_reference, baggage_allowance, class, meal_preference, special_requests) VALUES (1, '2023-10-01 10:00:00', '2023-10-01 10:00:00', 'AB123', '2023-12-01', '08:00:00', '2023-12-01', '12:00:00', 'ICN', 'JFK', 101, 'John Doe', '12A', 500.00, 'USD', 'Paid', 'BR123456', 20, 'Economy', 'Vegetarian', 'None')",
    "retry_count": 1
  },
  {
    "query": "항공편 스케줄을 데이터베이스에 추가해줘",
    "level": "Basic",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, flight_number, departure_date, departure_time, arrival_date, arrival_time, departure_airport, arrival_airport, passenger_id, passenger_name, seat_number, ticket_price, currency, payment_status, booking_reference, baggage_allowance, class, meal_preference, special_requests) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
    "retry_count": 5,
    "error_msg": "Incorrect number of bindings supplied. The current statement uses 21, and there are 0 supplied."
  },
  {
    "query": "서울에서 출발하는 모든 항공편의 항공사와 출발 시간을 보여줘",
    "level": "Basic",
    "type": "SELECT",
    "sql": "SELECT flight_number, departure_time FROM sample WHERE departure_airport = 'ICN'",
    "retry_count": 1
  },
  {
    "query": "이용 등급이 1 이하인 고객의 기록을 삭제해줘",
    "level": "Expert",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE class <= '1'",
    "retry_count": 1
  },
  {
    "query": "좌석이 배정되지 않은 예약 내역을 삭제해 주세요",
    "level": "Intermediate",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE seat_number IS NULL OR seat_number = ''",
    "retry_count": 1
  },
  {
    "query": "예약 상태가 '확정'인 항공편의 평균 좌석 점유율을 계산해줘",
    "level": "Expert",
    "type": "SELECT",
    "sql": "SELECT AVG(CAST(seat_number AS INTEGER)) FROM sample WHERE payment_status = '확정'",
    "retry_count": 1
  },
  {
    "query": "출발일이 지난 항공편 기록을 삭제해줘",
    "level": "Expert",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE departure_date < date('now')",
    "retry_count": 1
  },
  {
    "query": "승객의 요청으로 취소된 좌석을 삭제해줘",
    "level": "Advanced",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE special_requests LIKE '%취소%'",
    "retry_count": 1
  },
  {
    "query": "새로운 승객 정보를 항공사 데이터베이스에 등록해줘",
    "level": "Expert",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, flight_number, departure_date, departure_time, arrival_date, arrival_time, departure_airport, arrival_airport, passenger_id, passenger_name, seat_number, ticket_price, currency, payment_status, booking_reference, baggage_allowance, class, meal_preference, special_requests) VALUES (1, '2023-10-01 10:00:00', '2023-10-01 10:00:00', 'AB123', '2023-10-15', '08:00:00', '2023-10-15', '12:00:00', 'ICN', 'LAX', 101, '홍길동', '12A', 500.00, 'USD', 'Paid', 'BR123456', 20, 'Economy', 'Vegetarian', 'None')",
    "retry_count": 3
  },
  {
    "query": "현재 예약 상태가 '확인됨'인 모든 항공편의 항공편 번호와 출발 시간을 조회해줘",
    "level": "Advanced",
    "type": "SELECT",
    "sql": "SELECT flight_number, departure_time FROM sample WHERE payment_status = '확인됨'",
    "retry_count": 1
  },
  {
    "query": "신용카드로 결제된 예약 내역을 데이터베이스에 넣어주세요",
    "level": "Expert",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, flight_number, departure_date, departure_time, arrival_date, arrival_time, departure_airport, arrival_airport, passenger_id, passenger_name, seat_number, ticket_price, currency, payment_status, booking_reference, baggage_allowance, class, meal_preference, special_requests) VALUES (1, '2023-10-01 12:00:00', '2023-10-01 12:00:00', 'AB123', '2023-10-15', '08:00:00', '2023-10-15', '12:00:00', 'ICN', 'JFK', 101, 'John Doe', '12A', 500.00, 'USD', 'Credit Card', 'BR1234567890', 20, 'Economy', 'Vegetarian', 'None')",
    "retry_count": 1
  },
  {
    "query": "항공편 번호 'B456'의 도착 날짜를 다음 날로 수정해줘",
    "level": "Advanced",
    "type": "UPDATE",
    "sql": "UPDATE sample SET arrival_date = DATE(arrival_date, '+1 day') WHERE flight_number = 'B456'",
    "retry_count": 1
  },
  {
    "query": "특정 승객의 모든 지난 예약 정보를 예약 날짜 순으로 정렬하여 보여주세요",
    "level": "Intermediate",
    "type": "SELECT",
    "sql": "SELECT * FROM sample WHERE passenger_id = ? AND departure_date < DATE('now') ORDER BY departure_date",
    "retry_count": 5,
    "error_msg": "Incorrect number of bindings supplied. The current statement uses 1, and there are 0 supplied."
  },
  {
    "query": "최신 예약 날짜 순으로 상위 10개의 예약 정보를 보여줘",
    "level": "Expert",
    "type": "SELECT",
    "sql": "SELECT * FROM sample ORDER BY created_at DESC LIMIT 10",
    "retry_count": 1
  },
  {
    "query": "새로운 승객 정보를 시스템에 등록해줘",
    "level": "Intermediate",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, flight_number, departure_date, departure_time, arrival_date, arrival_time, departure_airport, arrival_airport, passenger_id, passenger_name, seat_number, ticket_price, currency, payment_status, booking_reference, baggage_allowance, class, meal_preference, special_requests) VALUES (1, '2023-10-01 10:00:00', '2023-10-01 10:00:00', 'AB123', '2023-10-15', '08:00:00', '2023-10-15', '12:00:00', 'ICN', 'JFK', 101, '홍길동', '12A', 500.00, 'USD', 'Paid', 'BR1234567890', 20, 'Economy', 'Vegetarian', 'None')",
    "retry_count": 1
  },
  {
    "query": "등록된 지 1년이 지난 미사용 승객 정보를 삭제해줘",
    "level": "Advanced",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE created_at <= datetime('now', '-1 year') AND passenger_id NOT IN (SELECT DISTINCT passenger_id FROM sample WHERE departure_date > date('now'))",
    "retry_count": 1
  },
  {
    "query": "좌석 번호가 없으면 해당 승객 정보를 삭제해줘",
    "level": "Expert",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE seat_number IS NULL",
    "retry_count": 1
  },
  {
    "query": "취소된 예약 내역을 전부 삭제해줘",
    "level": "Advanced",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE payment_status = '취소됨'",
    "retry_count": 1
  },
  {
    "query": "결제가 완료되지 않은 항공권을 삭제해줘",
    "level": "Basic",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE payment_status != '완료'",
    "retry_count": 1
  },
  {
    "query": "지난 한 달 동안 가장 많이 예약된 항공편의 항공편 번호와 예약 수를 보여줘",
    "level": "Basic",
    "type": "SELECT",
    "sql": "SELECT flight_number, COUNT(*) AS booking_count FROM sample WHERE departure_date >= DATE('now', '-1 month') GROUP BY flight_number ORDER BY booking_count DESC LIMIT 1",
    "retry_count": 1
  },
  {
    "query": "결제가 완료된 예약의 총 건수를 결제 방법별로 집계해줘",
    "level": "Basic",
    "type": "SELECT",
    "sql": "SELECT payment_status, COUNT(*) FROM sample WHERE payment_status = '결제 완료' GROUP BY payment_status",
    "retry_count": 1
  },
  {
    "query": "승객 수가 200명 이상인 항공편의 평균 티켓 가격을 항공사별로 계산해줘",
    "level": "Basic",
    "type": "SELECT",
    "sql": "SELECT flight_number, AVG(ticket_price) FROM sample WHERE flight_number IN (SELECT flight_number FROM sample GROUP BY flight_number HAVING COUNT(DISTINCT passenger_id) >= 200) GROUP BY flight_number",
    "retry_count": 1
  },
  {
    "query": "예약자 이영희의 이메일 주소를 최신 이메일로 변경해줘",
    "level": "Intermediate",
    "type": "UPDATE",
    "sql": "UPDATE sample SET passenger_name='이영희' WHERE passenger_name='이영희'",
    "retry_count": 1
  },
  {
    "query": "좌석 번호가 없는 승객 정보를 삭제해줘",
    "level": "Basic",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE seat_number IS NULL",
    "retry_count": 1
  },
  {
    "query": "결제 상태를 '완료'로 업데이트해줘",
    "level": "Basic",
    "type": "UPDATE",
    "sql": "UPDATE sample SET payment_status='완료'",
    "retry_count": 1
  },
  {
    "query": "승객 수가 가장 많은 항공편의 항공편 번호와 탑승객 수를 출력하라",
    "level": "Advanced",
    "type": "SELECT",
    "sql": "SELECT flight_number, COUNT(passenger_id) AS passenger_count FROM sample GROUP BY flight_number ORDER BY passenger_count DESC LIMIT 1",
    "retry_count": 1
  },
  {
    "query": "출발지가 '인천'이고 도착지가 '뉴욕'인 항공편의 예약 정보를 예약 일자 순으로 10개만 보여줘",
    "level": "Advanced",
    "type": "SELECT",
    "sql": "SELECT * FROM sample WHERE departure_airport = 'ICN' AND arrival_airport = 'JFK' ORDER BY departure_date LIMIT 10",
    "retry_count": 1
  },
  {
    "query": "2022년 한 해 동안 출발한 항공편의 총 좌석 수를 클래스별로 그룹화하여 계산하세요",
    "level": "Intermediate",
    "type": "SELECT",
    "sql": "SELECT class, COUNT(seat_number) FROM sample WHERE departure_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY class",
    "retry_count": 1
  },
  {
    "query": "예약된 항공편의 출발 시간을 오전 9시로 수정해줘",
    "level": "Basic",
    "type": "UPDATE",
    "sql": "UPDATE sample SET departure_time='09:00:00'",
    "retry_count": 1
  }
]