[
  {
    "query": "어제와 오늘의 평균 습도를 비교하여 서울의 경우 더 높은 날을 알려줘",
    "level": "Expert",
    "type": "SELECT",
    "sql": "SELECT CASE WHEN (SELECT AVG(humidity) FROM sample WHERE region = '서울' AND DATE(observation_time) = DATE('now', '-1 day')) > (SELECT AVG(humidity) FROM sample WHERE region = '서울' AND DATE(observation_time) = DATE('now')) THEN '어제' ELSE '오늘' END",
    "retry_count": 1
  },
  {
    "query": "수원의 내일 최저 기온을 10도로 수정해줘",
    "level": "Advanced",
    "type": "UPDATE",
    "sql": "UPDATE sample SET temperature=10 WHERE region='수원' AND DATE(observation_time) = DATE('now', '+1 day')",
    "retry_count": 1
  },
  {
    "query": "서울의 오늘 최고 기온을 25도로 수정해줘",
    "level": "Expert",
    "type": "UPDATE",
    "sql": "UPDATE sample SET temperature=25 WHERE region='서울' AND DATE(observation_time) = DATE('now')",
    "retry_count": 1
  },
  {
    "query": "지난달 평균 습도가 40% 이하인 도시의 날씨 데이터를 삭제해줘",
    "level": "Advanced",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE strftime('%Y-%m', observation_time) = strftime('%Y-%m', 'now', '-1 month') AND region IN (SELECT region FROM sample WHERE strftime('%Y-%m', observation_time) = strftime('%Y-%m', 'now', '-1 month') GROUP BY region HAVING AVG(humidity) <= 40)",
    "retry_count": 1
  },
  {
    "query": "습도가 100%에 도달한 날의 기록을 삭제해줘",
    "level": "Basic",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE humidity = 100",
    "retry_count": 1
  },
  {
    "query": "일주일 전의 날씨 정보를 모두 삭제해줘",
    "level": "Expert",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE observation_time < datetime('now', '-7 days')",
    "retry_count": 1
  },
  {
    "query": "부산의 지난 1년간 월별 평균 풍속을 계산하고, 최고 평균 풍속을 보였던 달을 알려줘",
    "level": "Intermediate",
    "type": "SELECT",
    "sql": "SELECT strftime('%Y-%m', observation_time) AS month, AVG(wind_speed) AS avg_wind_speed FROM sample WHERE region = '부산' AND observation_time >= datetime('now', '-1 year') GROUP BY month ORDER BY avg_wind_speed DESC LIMIT 1",
    "retry_count": 1
  },
  {
    "query": "지난 3일간 대전의 일일 강수량을 내림차순으로 정렬하여 상위 3개만 보여줘",
    "level": "Basic",
    "type": "SELECT",
    "sql": "SELECT precipitation FROM sample WHERE region = '대전' AND observation_time >= datetime('now', '-3 days') ORDER BY precipitation DESC LIMIT 3",
    "retry_count": 1
  },
  {
    "query": "제주의 강수량을 15mm로 변경해줘",
    "level": "Basic",
    "type": "UPDATE",
    "sql": "UPDATE sample SET precipitation=15 WHERE region='제주'",
    "retry_count": 1
  },
  {
    "query": "풍속이 50km/h 이하인 데이터를 지워줘",
    "level": "Expert",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE wind_speed <= 13.8889",
    "retry_count": 1
  },
  {
    "query": "지난주 평균 강수량이 10mm 미만인 지역의 데이터를 삭제해줘",
    "level": "Advanced",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE region IN (SELECT region FROM sample WHERE observation_time >= datetime('now', '-7 days') GROUP BY region HAVING AVG(precipitation) < 10)",
    "retry_count": 1
  },
  {
    "query": "내일 서울의 예상 기온과 강수량을 데이터베이스에 입력해줘",
    "level": "Intermediate",
    "type": "INSERT",
    "sql": "INSERT INTO sample (region, temperature, precipitation, created_at, updated_at, observation_time) VALUES ('서울', NULL, NULL, datetime('now'), datetime('now'), datetime('now', '+1 day'))",
    "retry_count": 1
  },
  {
    "query": "2023년 8월 중 강수량이 50mm 이상인 지역의 이름과 강수량을 내림차순으로 정렬해줘",
    "level": "Advanced",
    "type": "SELECT",
    "sql": "SELECT region, precipitation FROM sample WHERE precipitation >= 50 AND strftime('%Y-%m', observation_time) = '2023-08' ORDER BY precipitation DESC",
    "retry_count": 1
  },
  {
    "query": "오늘 서울의 기온과 습도 정보를 데이터베이스에 추가해줘",
    "level": "Basic",
    "type": "INSERT",
    "sql": "INSERT INTO sample (region, temperature, humidity) VALUES ('서울', NULL, NULL)",
    "retry_count": 1
  },
  {
    "query": "서울 지역의 기온 데이터 중 30도 이하인 값을 삭제해줘",
    "level": "Expert",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE region = '서울' AND temperature <= 30",
    "retry_count": 1
  },
  {
    "query": "이번 달 제주도의 평균 풍속 데이터를 입력해줘",
    "level": "Expert",
    "type": "INSERT",
    "sql": "INSERT INTO sample (created_at, updated_at, region, temperature, humidity, precipitation, wind_speed, wind_direction, pressure, visibility, cloud_cover, uv_index, sunrise, sunset, dew_point, feels_like, weather_condition, alert, observation_time, forecast) VALUES (CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, '제주도', NULL, NULL, NULL, (SELECT AVG(wind_speed) FROM sample WHERE region = '제주도' AND strftime('%Y-%m', observation_time) = strftime('%Y-%m', 'now')), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, NULL)",
    "retry_count": 1
  },
  {
    "query": "지난 1년 동안 평균 습도가 가장 낮았던 지역을 상위 3개만 보여줘",
    "level": "Advanced",
    "type": "SELECT",
    "sql": "SELECT region FROM sample WHERE observation_time >= datetime('now', '-1 year') GROUP BY region ORDER BY AVG(humidity) ASC LIMIT 3",
    "retry_count": 1
  },
  {
    "query": "풍속이 5m/s 이하인 날의 정보를 삭제해줘",
    "level": "Advanced",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE wind_speed <= 5",
    "retry_count": 1
  },
  {
    "query": "풍속이 5m/s 이하인 기록을 모두 삭제해줘",
    "level": "Intermediate",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE wind_speed <= 5",
    "retry_count": 1
  },
  {
    "query": "가장 최근의 태풍 경로 정보를 지역별로 묶어 보여줘",
    "level": "Advanced",
    "type": "SELECT",
    "sql": "SELECT region, MAX(observation_time) AS latest_observation_time FROM sample WHERE weather_condition LIKE '%태풍%' GROUP BY region",
    "retry_count": 1
  },
  {
    "query": "이번 달 부산의 일평균 강수량이 10mm 이상인 날의 날짜와 강수량을 출력해",
    "level": "Expert",
    "type": "SELECT",
    "sql": "SELECT DATE(observation_time) AS date, AVG(precipitation) AS avg_precipitation FROM sample WHERE region = '부산' AND strftime('%Y-%m', observation_time) = strftime('%Y-%m', 'now') GROUP BY DATE(observation_time) HAVING avg_precipitation > 10",
    "retry_count": 1
  },
  {
    "query": "대전의 일별 평균 습도 데이터를 데이터베이스에 입력해줘",
    "level": "Advanced",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, region, temperature, humidity, precipitation, wind_speed, wind_direction, pressure, visibility, cloud_cover, uv_index, sunrise, sunset, dew_point, feels_like, weather_condition, alert, observation_time, forecast) VALUES (1, '2023-10-01 00:00:00', '2023-10-01 00:00:00', '대전', NULL, 65.0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2023-10-01 00:00:00', NULL)",
    "retry_count": 1
  },
  {
    "query": "대전의 강수 확률을 40%로 업데이트해줘",
    "level": "Advanced",
    "type": "UPDATE",
    "sql": "UPDATE sample SET precipitation=40 WHERE region='대전'",
    "retry_count": 1
  },
  {
    "query": "광주의 습도가 70% 이상인 날의 날짜와 평균 풍속을 출력해",
    "level": "Basic",
    "type": "SELECT",
    "sql": "SELECT observation_time, AVG(wind_speed) FROM sample WHERE region = '광주' AND humidity >= 70 GROUP BY observation_time",
    "retry_count": 1
  },
  {
    "query": "이번 주 부산의 평균 습도를 70%로 수정해줘",
    "level": "Advanced",
    "type": "UPDATE",
    "sql": "UPDATE sample SET humidity=70 WHERE region='부산' AND strftime('%Y-%W', observation_time) = strftime('%Y-%W', 'now')",
    "retry_count": 1
  },
  {
    "query": "7월 한 달간 전국 지역별 최고 기온을 기록한 날짜와 함께 보여줘",
    "level": "Basic",
    "type": "SELECT",
    "sql": "SELECT region, MAX(temperature) AS max_temperature, DATE(observation_time) AS date FROM sample WHERE strftime('%m', observation_time) = '07' GROUP BY region",
    "retry_count": 1
  },
  {
    "query": "부산의 내일 강수 확률을 70%로 수정해줘",
    "level": "Expert",
    "type": "UPDATE",
    "sql": "UPDATE sample SET precipitation=70 WHERE region='부산' AND DATE(observation_time) = DATE('now', '+1 day')",
    "retry_count": 1
  },
  {
    "query": "대전의 습도를 45%로 수정해줘",
    "level": "Basic",
    "type": "UPDATE",
    "sql": "UPDATE sample SET humidity=45 WHERE region='대전'",
    "retry_count": 1
  },
  {
    "query": "부산 지역의 이번 주 강수량 예보를 시스템에 추가해줘",
    "level": "Expert",
    "type": "INSERT",
    "sql": "INSERT INTO sample (region, precipitation, forecast) VALUES ('부산', NULL, '이번 주 강수량 예보')",
    "retry_count": 1
  },
  {
    "query": "어제 수집된 강수량 데이터 중 오류값을 제거해줘",
    "level": "Expert",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE DATE(observation_time) = DATE('now', '-1 day') AND (precipitation < 0 OR precipitation > 500)",
    "retry_count": 1
  },
  {
    "query": "가장 바람이 강하게 불었던 날의 날짜와 그날의 최고 풍속을 보여줘",
    "level": "Advanced",
    "type": "SELECT",
    "sql": "SELECT observation_time, MAX(wind_speed) FROM sample",
    "retry_count": 1
  },
  {
    "query": "서울 지역의 습도가 30% 이하인 날씨 정보를 삭제해줘",
    "level": "Intermediate",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE region = '서울' AND humidity <= 30",
    "retry_count": 1
  },
  {
    "query": "풍속이 10m/s 미만인 모든 기록을 삭제해줘",
    "level": "Basic",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE wind_speed < 10",
    "retry_count": 1
  },
  {
    "query": "부산의 강수량 정보를 10mm로 변경해줘",
    "level": "Intermediate",
    "type": "UPDATE",
    "sql": "UPDATE sample SET precipitation=10 WHERE region='부산'",
    "retry_count": 1
  },
  {
    "query": "인천의 이번 주 평균 풍속을 5m/s로 업데이트해줘",
    "level": "Expert",
    "type": "UPDATE",
    "sql": "UPDATE sample SET wind_speed=5 WHERE region='인천' AND strftime('%W', observation_time) = strftime('%W', 'now')",
    "retry_count": 1
  },
  {
    "query": "부산의 이번 주말 날씨 정보를 시스템에 등록해줘",
    "level": "Intermediate",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, region, temperature, humidity, precipitation, wind_speed, wind_direction, pressure, visibility, cloud_cover, uv_index, sunrise, sunset, dew_point, feels_like, weather_condition, alert, observation_time, forecast) VALUES (1, '2023-10-14 00:00:00', '2023-10-14 00:00:00', '부산', 20.5, 60.0, 0.0, 3.5, '북동', 1015.0, 10.0, 20.0, 5, '06:30:00', '18:00:00', 12.0, 19.0, '맑음', '없음', '2023-10-14 09:00:00', '주말 동안 맑음')",
    "retry_count": 1
  },
  {
    "query": "서울의 오늘 최고 기온을 28도로 업데이트해줘",
    "level": "Advanced",
    "type": "UPDATE",
    "sql": "UPDATE sample SET temperature=28 WHERE region='서울' AND DATE(observation_time) = DATE('now')",
    "retry_count": 1
  },
  {
    "query": "서울의 최근 일주일간 일별 평균 기온을 최고 기온 순으로 보여줘",
    "level": "Advanced",
    "type": "SELECT",
    "sql": "SELECT strftime('%Y-%m-%d', observation_time) AS date, AVG(temperature) AS avg_temp FROM sample WHERE region = '서울' AND observation_time >= datetime('now', '-7 days') GROUP BY date ORDER BY avg_temp DESC",
    "retry_count": 1
  },
  {
    "query": "광주의 현재 기온을 25도로 업데이트 해줘",
    "level": "Basic",
    "type": "UPDATE",
    "sql": "UPDATE sample SET temperature=25 WHERE region='광주'",
    "retry_count": 1
  },
  {
    "query": "인천의 현재 습도를 65%로 업데이트해줘",
    "level": "Intermediate",
    "type": "UPDATE",
    "sql": "UPDATE sample SET humidity=65 WHERE region='인천'",
    "retry_count": 1
  },
  {
    "query": "대전의 풍속 데이터를 5m/s로 수정해줘",
    "level": "Intermediate",
    "type": "UPDATE",
    "sql": "UPDATE sample SET wind_speed=5 WHERE region='대전'",
    "retry_count": 1
  },
  {
    "query": "대전의 현재 습도를 60%로 변경해줘",
    "level": "Expert",
    "type": "UPDATE",
    "sql": "UPDATE sample SET humidity=60 WHERE region='대전'",
    "retry_count": 1
  },
  {
    "query": "서울의 이번 주 일일 평균 기온을 계산하여 날짜별로 오름차순 정렬해서 보여줘",
    "level": "Expert",
    "type": "SELECT",
    "sql": "SELECT DATE(observation_time) AS date, AVG(temperature) AS average_temperature FROM sample WHERE region = '서울' AND observation_time >= DATE('now', 'weekday 0', '-7 days') AND observation_time < DATE('now', 'weekday 0') GROUP BY date ORDER BY date ASC",
    "retry_count": 1
  },
  {
    "query": "부산의 현재 날씨 데이터를 시스템에 등록해줘",
    "level": "Basic",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, region, temperature, humidity, precipitation, wind_speed, wind_direction, pressure, visibility, cloud_cover, uv_index, sunrise, sunset, dew_point, feels_like, weather_condition, alert, observation_time, forecast) VALUES (1, '2023-10-01 10:00:00', '2023-10-01 10:00:00', '부산', 25.0, 60.0, 0.0, 3.5, '북동', 1013.0, 10.0, 20.0, 5, '06:00:00', '18:00:00', 15.0, 26.0, '맑음', '없음', '2023-10-01 10:00:00', '맑음')",
    "retry_count": 1
  },
  {
    "query": "제주도의 날씨 데이터 중 기온이 30도 이상인 날의 날짜와 기온을 보여줘",
    "level": "Intermediate",
    "type": "SELECT",
    "sql": "SELECT observation_time, temperature FROM sample WHERE region = '제주도' AND temperature >= 30",
    "retry_count": 1
  },
  {
    "query": "서울의 오늘 최고 기온을 30도로 수정해줘",
    "level": "Basic",
    "type": "UPDATE",
    "sql": "UPDATE sample SET temperature=30 WHERE region='서울' AND DATE(observation_time) = DATE('now')",
    "retry_count": 1
  },
  {
    "query": "광주의 오후 강수량을 10mm로 수정해줘",
    "level": "Expert",
    "type": "UPDATE",
    "sql": "UPDATE sample SET precipitation=10 WHERE region='광주' AND strftime('%H', observation_time) >= '12' AND strftime('%H', observation_time) < '18'",
    "retry_count": 1
  },
  {
    "query": "습도가 90%를 초과하는 기록을 데이터베이스에서 삭제해줘",
    "level": "Expert",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE humidity > 90",
    "retry_count": 1
  },
  {
    "query": "부산의 오늘 예상 강수량을 시간대별로 가져와",
    "level": "Basic",
    "type": "SELECT",
    "sql": "SELECT observation_time, precipitation FROM sample WHERE region = '부산' AND DATE(observation_time) = DATE('now')",
    "retry_count": 1
  },
  {
    "query": "습도가 90% 이상인 날씨 데이터를 제거해줘",
    "level": "Intermediate",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE humidity >= 90",
    "retry_count": 1
  },
  {
    "query": "서울의 내일 기온과 습도를 데이터베이스에 등록해줘",
    "level": "Expert",
    "type": "INSERT",
    "sql": "INSERT INTO sample (region, temperature, humidity) VALUES ('서울', NULL, NULL)",
    "retry_count": 1
  },
  {
    "query": "지난주 월요일의 강수량 데이터 삭제해줘",
    "level": "Intermediate",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE DATE(observation_time) = DATE('now', '-7 days', 'weekday 1')",
    "retry_count": 1
  },
  {
    "query": "지난 한 달 동안 강수량이 가장 많은 3개 지역의 이름과 강수량을 알려줘",
    "level": "Intermediate",
    "type": "SELECT",
    "sql": "SELECT region, precipitation FROM sample WHERE observation_time >= datetime('now', '-1 month') ORDER BY precipitation DESC LIMIT 3",
    "retry_count": 1
  },
  {
    "query": "일일 강수량이 50mm를 초과한 날의 정보를 삭제해줘",
    "level": "Basic",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE precipitation > 50",
    "retry_count": 1
  },
  {
    "query": "현재 습도가 70% 이상인 지역의 이름을 알파벳 순으로 정렬해줘",
    "level": "Intermediate",
    "type": "SELECT",
    "sql": "SELECT region FROM sample WHERE humidity >= 70 ORDER BY region ASC",
    "retry_count": 1
  },
  {
    "query": "최고 기온이 35도 이상인 날의 기록을 삭제해줘",
    "level": "Advanced",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE temperature >= 35",
    "retry_count": 1
  },
  {
    "query": "서울의 지난 7일간 평균 기온을 계산하여 보여줘",
    "level": "Intermediate",
    "type": "SELECT",
    "sql": "SELECT AVG(temperature) FROM sample WHERE region = '서울' AND observation_time >= datetime('now', '-7 days')",
    "retry_count": 1
  },
  {
    "query": "지난 7일 동안 제주도의 풍속이 가장 강했던 날의 날짜와 풍속을 조회해",
    "level": "Expert",
    "type": "SELECT",
    "sql": "SELECT observation_time, wind_speed FROM sample WHERE region = '제주도' AND observation_time >= datetime('now', '-7 days') ORDER BY wind_speed DESC LIMIT 1",
    "retry_count": 1
  },
  {
    "query": "울산의 내일 최저 기온을 15도로 업데이트해줘",
    "level": "Intermediate",
    "type": "UPDATE",
    "sql": "UPDATE sample SET temperature=15 WHERE region='울산' AND DATE(observation_time) = DATE('now', '+1 day')",
    "retry_count": 1
  },
  {
    "query": "부산의 풍속 정보를 12km/h로 업데이트 해줘",
    "level": "Basic",
    "type": "UPDATE",
    "sql": "UPDATE sample SET wind_speed=3.33 WHERE region='부산'",
    "retry_count": 1
  },
  {
    "query": "부산의 현재 강수량 정보를 시스템에 추가해줘",
    "level": "Advanced",
    "type": "INSERT",
    "sql": "INSERT INTO sample (region, precipitation) VALUES ('부산', 0.0)",
    "retry_count": 1
  },
  {
    "query": "지난주에 기록된 강수량이 0mm인 데이터를 삭제해줘",
    "level": "Basic",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE precipitation = 0 AND observation_time >= datetime('now', '-7 days')",
    "retry_count": 1
  },
  {
    "query": "지난해 강수량이 200mm 이하인 달의 데이터를 삭제해줘",
    "level": "Advanced",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE precipitation <= 200 AND strftime('%Y', observation_time) = strftime('%Y', 'now', '-1 year')",
    "retry_count": 1
  },
  {
    "query": "서울에서 지난 일주일간 일일 평균 기온을 날짜별로 보여줘",
    "level": "Basic",
    "type": "SELECT",
    "sql": "SELECT DATE(observation_time) AS date, AVG(temperature) AS average_temperature FROM sample WHERE region = '서울' AND observation_time >= DATETIME('now', '-7 days') GROUP BY DATE(observation_time)",
    "retry_count": 1
  },
  {
    "query": "평균 기온이 35도 이상인 지역 정보를 삭제해줘",
    "level": "Basic",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE temperature >= 35",
    "retry_count": 1
  },
  {
    "query": "서울의 오늘 최고 기온을 28도로 수정해줘",
    "level": "Intermediate",
    "type": "UPDATE",
    "sql": "UPDATE sample SET temperature=28 WHERE region='서울' AND DATE(observation_time) = DATE('now')",
    "retry_count": 1
  },
  {
    "query": "인천의 현재 바람 속도를 15km/h로 변경해줘",
    "level": "Advanced",
    "type": "UPDATE",
    "sql": "UPDATE sample SET wind_speed=4.16667 WHERE region='인천'",
    "retry_count": 1
  },
  {
    "query": "오늘 서울의 최고 기온과 최저 기온을 데이터베이스에 기록해줘",
    "level": "Advanced",
    "type": "INSERT",
    "sql": "INSERT INTO sample (created_at, updated_at, region, temperature, observation_time) VALUES (datetime('now'), datetime('now'), '서울', (SELECT MAX(temperature) FROM sample WHERE region = '서울' AND date(observation_time) = date('now')), datetime('now'))",
    "retry_count": 1
  },
  {
    "query": "최고 기온이 35도 이상인 기록을 삭제해줘",
    "level": "Intermediate",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE temperature >= 35",
    "retry_count": 1
  },
  {
    "query": "전국 주요 도시의 현재 기온을 높은 순으로 정렬하여 상위 3개 도시만 출력해",
    "level": "Expert",
    "type": "SELECT",
    "sql": "SELECT region, temperature FROM sample ORDER BY temperature DESC LIMIT 3",
    "retry_count": 1
  }
]