[
  {
    "query": "환자의 이름과 생년월일을 모두 보여줘",
    "level": "Basic",
    "type": "SELECT",
    "sql": "SELECT patient_name, patient_dob FROM sample",
    "retry_count": 1
  },
  {
    "query": "의사별로 처리한 진료 건수를 내림차순으로 정렬해줘",
    "level": "Basic",
    "type": "SELECT",
    "sql": "SELECT doctor_name, COUNT(*) AS visit_count FROM sample GROUP BY doctor_name ORDER BY visit_count DESC",
    "retry_count": 1
  },
  {
    "query": "지난 두 달 내에 예약된 진료의 총 건수를 알려줘",
    "level": "Basic",
    "type": "SELECT",
    "sql": "SELECT COUNT(*) FROM sample WHERE visit_date >= DATE('now', '-2 months')",
    "retry_count": 1
  },
  {
    "query": "특정 질병을 진단받은 환자의 수를 진단일 기준으로 그룹화하여 보여줘",
    "level": "Expert",
    "type": "SELECT",
    "sql": "SELECT visit_date, COUNT(DISTINCT patient_id) FROM sample WHERE diagnosis = '특정 질병' GROUP BY visit_date",
    "retry_count": 1
  },
  {
    "query": "환자에게 발급된 새로운 처방전을 기록해줘",
    "level": "Advanced",
    "type": "INSERT",
    "sql": "INSERT INTO sample (created_at, updated_at, patient_id, doctor_id, appointment_id, prescription_id, visit_date, diagnosis, treatment, notes, patient_name, patient_dob, patient_gender, doctor_name, specialization, appointment_status, prescription_details, billing_amount, insurance_provider, insurance_policy_number) VALUES (CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 1, 1, 1, 1, '2023-10-05 10:00:00', '진단 내용', '치료 내용', '추가 메모', '환자 이름', '1990-01-01', '남성', '의사 이름', '전문 분야', '예약 상태', '처방전 세부사항', 100.00, '보험 제공자', '보험 증권 번호')",
    "retry_count": 3
  },
  {
    "query": "지난 1년간 진료를 받은 환자 수를 연령대별로 그룹화하여 보여줘",
    "level": "Advanced",
    "type": "SELECT",
    "sql": "SELECT CASE WHEN strftime('%Y', 'now') - strftime('%Y', patient_dob) < 20 THEN '0-19' WHEN strftime('%Y', 'now') - strftime('%Y', patient_dob) BETWEEN 20 AND 29 THEN '20-29' WHEN strftime('%Y', 'now') - strftime('%Y', patient_dob) BETWEEN 30 AND 39 THEN '30-39' WHEN strftime('%Y', 'now') - strftime('%Y', patient_dob) BETWEEN 40 AND 49 THEN '40-49' WHEN strftime('%Y', 'now') - strftime('%Y', patient_dob) BETWEEN 50 AND 59 THEN '50-59' WHEN strftime('%Y', 'now') - strftime('%Y', patient_dob) BETWEEN 60 AND 69 THEN '60-69' ELSE '70+' END AS age_group, COUNT(DISTINCT patient_id) AS patient_count FROM sample WHERE visit_date >= date('now', '-1 year') GROUP BY age_group",
    "retry_count": 1
  },
  {
    "query": "예약 시간을 오전 10시에서 오후 2시로 수정해줘",
    "level": "Advanced",
    "type": "UPDATE",
    "sql": "UPDATE sample SET visit_date = datetime(visit_date, '+4 hours') WHERE strftime('%H', visit_date) = '10'",
    "retry_count": 1
  },
  {
    "query": "취소된 예약 정보를 모두 삭제해줘",
    "level": "Intermediate",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE appointment_status = '취소됨'",
    "retry_count": 1
  },
  {
    "query": "의사별로 총 진료 건수를 계산하고, 그 수가 100건 이상인 의사의 이름과 진료 건수를 정렬해서 보여줘",
    "level": "Advanced",
    "type": "SELECT",
    "sql": "SELECT doctor_name, COUNT(*) AS total_visits FROM sample GROUP BY doctor_name HAVING total_visits >= 100 ORDER BY total_visits DESC",
    "retry_count": 1
  },
  {
    "query": "김철수 환자가 최근에 받은 처방전 목록을 보여줘",
    "level": "Basic",
    "type": "SELECT",
    "sql": "SELECT prescription_details FROM sample WHERE patient_name = '김철수' ORDER BY visit_date DESC",
    "retry_count": 1
  },
  {
    "query": "예약 날짜가 지난 예약을 모두 삭제해줘",
    "level": "Basic",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE visit_date < datetime('now')",
    "retry_count": 1
  },
  {
    "query": "의사 아이디가 100번 이하인 의사 정보를 삭제해줘",
    "level": "Intermediate",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE doctor_id <= 100",
    "retry_count": 1
  },
  {
    "query": "의사가 퇴사하여 담당자가 없는 진료 기록을 삭제해줘",
    "level": "Advanced",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE doctor_id IS NULL",
    "retry_count": 1
  },
  {
    "query": "환자 테이블에서 '김'씨 성을 가진 환자의 나이를 오름차순으로 정렬해 보여줘",
    "level": "Intermediate",
    "type": "SELECT",
    "sql": "SELECT strftime('%Y', 'now') - strftime('%Y', patient_dob) AS age FROM sample WHERE patient_name LIKE '김%' ORDER BY age ASC",
    "retry_count": 1
  },
  {
    "query": "환자들이 예약한 모든 진료를 진료 날짜 기준으로 정렬하여 최근 10개의 기록을 가져와",
    "level": "Expert",
    "type": "SELECT",
    "sql": "SELECT * FROM sample ORDER BY visit_date DESC LIMIT 10",
    "retry_count": 1
  },
  {
    "query": "진료 이력이 없는 환자 정보를 삭제해줘",
    "level": "Advanced",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE patient_id NOT IN (SELECT DISTINCT patient_id FROM sample WHERE diagnosis IS NOT NULL OR treatment IS NOT NULL)",
    "retry_count": 1
  },
  {
    "query": "효력이 만료된 처방전을 삭제해줘",
    "level": "Intermediate",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE prescription_id IS NOT NULL AND appointment_status = 'Expired'",
    "retry_count": 1
  },
  {
    "query": "진료 기록 번호 12345번의 진단 결과를 '감기'에서 '독감'으로 수정해줘",
    "level": "Expert",
    "type": "UPDATE",
    "sql": "UPDATE sample SET diagnosis='독감' WHERE id=12345",
    "retry_count": 1
  },
  {
    "query": "진료 기록 중 10월 5일의 김영희 혈압 수치를 120/80으로 수정해줘",
    "level": "Intermediate",
    "type": "UPDATE",
    "sql": "UPDATE sample SET notes='혈압 수치: 120/80' WHERE patient_name='김영희' AND DATE(visit_date)='2023-10-05'",
    "retry_count": 1
  },
  {
    "query": "이상민 환자의 처방전을 다음 주 월요일 날짜로 업데이트해줘",
    "level": "Basic",
    "type": "UPDATE",
    "sql": "UPDATE sample SET prescription_id=(SELECT prescription_id FROM sample WHERE patient_name='이상민') WHERE patient_name='이상민' AND visit_date=date('now', 'weekday 1', '+1 week')",
    "retry_count": 1
  },
  {
    "query": "이미 퇴원한 환자의 대기 기록을 삭제해줘",
    "level": "Basic",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE appointment_status = '퇴원'",
    "retry_count": 1
  },
  {
    "query": "이승환 환자에게 처방된 약의 용량을 50mg에서 100mg으로 업데이트해줘",
    "level": "Expert",
    "type": "UPDATE",
    "sql": "UPDATE sample SET prescription_details = REPLACE(prescription_details, '50mg', '100mg') WHERE patient_name = '이승환'",
    "retry_count": 1
  },
  {
    "query": "특정 의사에게 예약된 전체 환자의 평균 나이를 구하고 그 나이가 30 이상인 의사만 보여줘",
    "level": "Intermediate",
    "type": "SELECT",
    "sql": "SELECT doctor_name, AVG((julianday('now') - julianday(patient_dob)) / 365.25) AS average_age FROM sample GROUP BY doctor_name HAVING average_age >= 30",
    "retry_count": 1
  },
  {
    "query": "의료진별로 총 처방된 처방전 수를 계산해 5개만 보여줘",
    "level": "Intermediate",
    "type": "SELECT",
    "sql": "SELECT doctor_name, COUNT(prescription_id) AS total_prescriptions FROM sample GROUP BY doctor_name ORDER BY total_prescriptions DESC LIMIT 5",
    "retry_count": 1
  },
  {
    "query": "새로운 환자 정보를 시스템에 등록해줘",
    "level": "Advanced",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, patient_id, doctor_id, appointment_id, prescription_id, visit_date, diagnosis, treatment, notes, patient_name, patient_dob, patient_gender, doctor_name, specialization, appointment_status, prescription_details, billing_amount, insurance_provider, insurance_policy_number) VALUES (1, '2023-10-01 10:00:00', '2023-10-01 10:00:00', 1001, 2001, 3001, 4001, '2023-10-01 09:00:00', 'Flu', 'Rest and hydration', 'Patient advised to rest for a week', 'John Doe', '1980-05-15', 'Male', 'Dr. Smith', 'General Medicine', 'Scheduled', 'Take one tablet daily', 150.00, 'Health Insurance Co.', 'HIC1234567890')",
    "retry_count": 1
  },
  {
    "query": "진료 기록의 진단 결과를 새로운 결과로 업데이트해줘",
    "level": "Advanced",
    "type": "UPDATE",
    "sql": "UPDATE sample SET diagnosis='새로운 결과' WHERE id=1",
    "retry_count": 1
  },
  {
    "query": "2022년 이전에 생성된 진료 기록을 삭제해줘",
    "level": "Intermediate",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE created_at < '2022-01-01 00:00:00'",
    "retry_count": 1
  },
  {
    "query": "진료를 1년 이상 받지 않은 환자 정보를 삭제해줘",
    "level": "Intermediate",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE patient_id IN (SELECT patient_id FROM sample WHERE visit_date < DATE('now', '-1 year'))",
    "retry_count": 1
  },
  {
    "query": "3년 이상 방문 기록이 없는 환자를 삭제해줘",
    "level": "Expert",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE patient_id IN (SELECT patient_id FROM sample WHERE visit_date < date('now', '-3 years') GROUP BY patient_id HAVING MAX(visit_date) < date('now', '-3 years'))",
    "retry_count": 1
  },
  {
    "query": "만료된 의약품 처방전을 삭제해줘",
    "level": "Expert",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE prescription_id IN (SELECT prescription_id FROM sample WHERE DATE(visit_date, '+30 days') < DATE('now'))",
    "retry_count": 1
  },
  {
    "query": "의사 이영희의 전공 분야를 심장내과로 업데이트해줘",
    "level": "Intermediate",
    "type": "UPDATE",
    "sql": "UPDATE sample SET specialization='심장내과' WHERE doctor_name='이영희'",
    "retry_count": 1
  },
  {
    "query": "2023년에 작성된 진료 기록 중에서 환자별로 가장 많이 방문한 의사의 이름을 보여줘",
    "level": "Intermediate",
    "type": "SELECT",
    "sql": "SELECT patient_name, doctor_name FROM sample WHERE strftime('%Y', visit_date) = '2023' GROUP BY patient_name, doctor_name ORDER BY COUNT(doctor_id) DESC LIMIT 1",
    "retry_count": 1
  },
  {
    "query": "만료된 처방전을 전부 삭제해줘",
    "level": "Advanced",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE prescription_id IN (SELECT prescription_id FROM sample WHERE DATE(visit_date, '+30 days') < DATE('now'))",
    "retry_count": 1
  },
  {
    "query": "2023년 1월 이후 예약된 모든 진료의 환자 이름과 예약 날짜를 보여줘",
    "level": "Expert",
    "type": "SELECT",
    "sql": "SELECT patient_name, visit_date FROM sample WHERE visit_date >= '2023-01-01'",
    "retry_count": 1
  },
  {
    "query": "유효 기간이 지난 처방전을 삭제해줘",
    "level": "Basic",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE prescription_id IN (SELECT prescription_id FROM sample WHERE DATE(visit_date, '+30 days') < DATE('now'))",
    "retry_count": 1
  },
  {
    "query": "지난 달에 진료를 받은 환자들의 평균 나이를 계산해줘",
    "level": "Expert",
    "type": "SELECT",
    "sql": "SELECT AVG((strftime('%Y', 'now') - strftime('%Y', patient_dob)) - (strftime('%m-%d', 'now') < strftime('%m-%d', patient_dob))) FROM sample WHERE strftime('%Y-%m', visit_date) = strftime('%Y-%m', 'now', '-1 month')",
    "retry_count": 1
  },
  {
    "query": "환자 정보 중 주소를 새롭게 변경된 주소로 수정해줘",
    "level": "Basic",
    "type": "UPDATE",
    "sql": "죄송하지만, 제공된 스키마에는 주소와 관련된 컬럼이 없습니다. 따라서 주소를 업데이트하는 SQL 쿼리를 작성할 수 없습니다.",
    "retry_count": 5,
    "error_msg": "near \"죄송하지만\": syntax error"
  },
  {
    "query": "의사 면허가 만료된 기록을 삭제해줘",
    "level": "Basic",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE doctor_id IN (SELECT doctor_id FROM sample WHERE appointment_status = '면허 만료')",
    "retry_count": 5
  },
  {
    "query": "의사 김철수의 진료 시간을 오후 3시로 변경해줘",
    "level": "Basic",
    "type": "UPDATE",
    "sql": "UPDATE sample SET visit_date = '2023-10-10 15:00:00' WHERE doctor_name = '김철수'",
    "retry_count": 1
  },
  {
    "query": "새로운 환자를 병원 시스템에 등록해줘",
    "level": "Basic",
    "type": "INSERT",
    "sql": "INSERT INTO sample (created_at, updated_at, patient_id, doctor_id, appointment_id, prescription_id, visit_date, diagnosis, treatment, notes, patient_name, patient_dob, patient_gender, doctor_name, specialization, appointment_status, prescription_details, billing_amount, insurance_provider, insurance_policy_number) VALUES (CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 1, 1, 1, 1, '2023-10-01 10:00:00', '진단 내용', '치료 내용', '추가 메모', '환자 이름', '1990-01-01', '남성', '의사 이름', '전문 분야', '예약 상태', '처방전 세부사항', 100.00, '보험 제공자', '보험 증권 번호')",
    "retry_count": 1
  },
  {
    "query": "다음 주 월요일 오후 3시에 예약을 추가해줘",
    "level": "Expert",
    "type": "INSERT",
    "sql": "INSERT INTO sample (created_at, updated_at, visit_date, appointment_status) VALUES (datetime('now'), datetime('now'), datetime('now', 'next monday', '15:00'), 'Scheduled')",
    "retry_count": 1
  },
  {
    "query": "예약 시간이 지난 예약 기록을 삭제해줘",
    "level": "Expert",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE appointment_status = 'past'",
    "retry_count": 1
  },
  {
    "query": "의사가 작성한 새로운 처방전을 데이터베이스에 저장해줘",
    "level": "Expert",
    "type": "INSERT",
    "sql": "INSERT INTO sample (created_at, updated_at, patient_id, doctor_id, appointment_id, prescription_id, visit_date, diagnosis, treatment, notes, patient_name, patient_dob, patient_gender, doctor_name, specialization, appointment_status, prescription_details, billing_amount, insurance_provider, insurance_policy_number) VALUES (CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
    "retry_count": 5,
    "error_msg": "Incorrect number of bindings supplied. The current statement uses 18, and there are 0 supplied."
  },
  {
    "query": "환자 김철수의 연락처를 최신 번호로 업데이트해줘",
    "level": "Expert",
    "type": "UPDATE",
    "sql": "I'm sorry, but the provided schema does not include a column for contact information. Therefore, it is not possible to update the contact number for the patient \"김철수\" using the given schema.",
    "retry_count": 5,
    "error_msg": "near \"I\": syntax error"
  },
  {
    "query": "처방전 번호 20231001의 약품을 아스피린으로 바꿔줘",
    "level": "Intermediate",
    "type": "UPDATE",
    "sql": "UPDATE sample SET prescription_details='아스피린' WHERE prescription_id=20231001",
    "retry_count": 1
  },
  {
    "query": "면허가 만료된 의사의 정보를 삭제해줘",
    "level": "Expert",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE doctor_id IN (SELECT doctor_id FROM sample WHERE appointment_status = '면허 만료')",
    "retry_count": 1
  },
  {
    "query": "오늘 예약한 환자의 진료 기록 상태를 완료로 수정해줘",
    "level": "Basic",
    "type": "UPDATE",
    "sql": "UPDATE sample SET appointment_status='완료' WHERE date(visit_date) = date('now')",
    "retry_count": 1
  },
  {
    "query": "특정 환자의 연락처를 최신 정보로 업데이트해줘",
    "level": "Basic",
    "type": "UPDATE",
    "sql": "I'm sorry, but the provided schema does not include a column for contact information. Therefore, it's not possible to update the contact information for a patient based on the given schema.",
    "retry_count": 5,
    "error_msg": "near \"I\": syntax error"
  },
  {
    "query": "처방전 수가 가장 많은 의사 상위 3명의 이름과 그들의 전문 분야를 조회해줘",
    "level": "Expert",
    "type": "SELECT",
    "sql": "SELECT doctor_name, specialization FROM sample GROUP BY doctor_id ORDER BY COUNT(prescription_id) DESC LIMIT 3",
    "retry_count": 1
  },
  {
    "query": "복용 기간이 30일 이상인 처방전을 받은 환자의 이름을 알파벳 순으로 10명만 보여줘",
    "level": "Advanced",
    "type": "SELECT",
    "sql": "SELECT patient_name FROM sample WHERE prescription_details LIKE '%30일%' ORDER BY patient_name ASC LIMIT 10",
    "retry_count": 1
  },
  {
    "query": "최은지 환자의 예약 날짜를 10월 15일에서 10월 18일로 변경해줘",
    "level": "Expert",
    "type": "UPDATE",
    "sql": "UPDATE sample SET visit_date='2023-10-18' WHERE patient_name='최은지' AND visit_date='2023-10-15'",
    "retry_count": 1
  },
  {
    "query": "마지막 방문 날짜가 3년 이상 된 환자 기록을 삭제해줘",
    "level": "Advanced",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE visit_date < DATE('now', '-3 years')",
    "retry_count": 1
  },
  {
    "query": "환자 김철수의 전화번호를 010-1234-5678로 수정해줘",
    "level": "Intermediate",
    "type": "UPDATE",
    "sql": "UPDATE sample SET notes='전화번호: 010-1234-5678' WHERE patient_name='김철수'",
    "retry_count": 4
  },
  {
    "query": "예약된 진료 기록을 데이터베이스에 추가해줘",
    "level": "Intermediate",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, patient_id, doctor_id, appointment_id, prescription_id, visit_date, diagnosis, treatment, notes, patient_name, patient_dob, patient_gender, doctor_name, specialization, appointment_status, prescription_details, billing_amount, insurance_provider, insurance_policy_number) VALUES (1, '2023-10-01 10:00:00', '2023-10-01 10:00:00', 123, 456, 789, 101, '2023-10-01 10:30:00', 'Flu', 'Rest and hydration', 'Patient advised to rest for a week', 'John Doe', '1990-01-01', 'Male', 'Dr. Smith', 'General Medicine', 'Scheduled', 'Take one tablet daily', 100.00, 'Health Insurance Co.', 'INS123456789')",
    "retry_count": 2
  },
  {
    "query": "새로운 환자 정보를 시스템에 등록해줘",
    "level": "Expert",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, patient_id, doctor_id, appointment_id, prescription_id, visit_date, diagnosis, treatment, notes, patient_name, patient_dob, patient_gender, doctor_name, specialization, appointment_status, prescription_details, billing_amount, insurance_provider, insurance_policy_number) VALUES (NULL, '2023-10-01 10:00:00', '2023-10-01 10:00:00', 1, 1, 1, 1, '2023-10-01 10:00:00', '감기', '휴식 및 수분 섭취', '특이사항 없음', '홍길동', '1990-01-01', '남성', '김의사', '내과', '예약 완료', '타이레놀 500mg 하루 3회', 50000.00, '국민건강보험', '1234567890')",
    "retry_count": 1
  },
  {
    "query": "취소된 예약 내역을 삭제해줘",
    "level": "Advanced",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE appointment_status = '취소됨'",
    "retry_count": 1
  },
  {
    "query": "처방전의 약물 용량을 50mg에서 100mg으로 변경해줘",
    "level": "Advanced",
    "type": "UPDATE",
    "sql": "UPDATE sample SET prescription_details = REPLACE(prescription_details, '50mg', '100mg') WHERE prescription_details LIKE '%50mg%'",
    "retry_count": 1
  },
  {
    "query": "지난해 방문한 환자 수가 100명 이상인 의사의 이름을 알려줘",
    "level": "Basic",
    "type": "SELECT",
    "sql": "SELECT doctor_name FROM sample WHERE strftime('%Y', visit_date) = strftime('%Y', 'now', '-1 year') GROUP BY doctor_name HAVING COUNT(DISTINCT patient_id) > 100",
    "retry_count": 1
  },
  {
    "query": "이번 주 진료 예약을 데이터베이스에 추가해줘",
    "level": "Advanced",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, patient_id, doctor_id, appointment_id, prescription_id, visit_date, diagnosis, treatment, notes, patient_name, patient_dob, patient_gender, doctor_name, specialization, appointment_status, prescription_details, billing_amount, insurance_provider, insurance_policy_number) VALUES (1, '2023-10-23 10:00:00', '2023-10-23 10:00:00', 101, 201, 301, 401, '2023-10-23 10:30:00', '감기', '약 처방', '환자가 기침을 많이 함', '홍길동', '1990-05-15', '남', '김의사', '내과', '예약됨', '타이레놀 500mg 하루 3회', 50000.00, '국민건강보험', '1234567890')",
    "retry_count": 1
  },
  {
    "query": "가장 최근에 예약된 진료의 환자 이름과 예약 날짜를 알려줘",
    "level": "Advanced",
    "type": "SELECT",
    "sql": "SELECT patient_name, created_at FROM sample ORDER BY created_at DESC LIMIT 1",
    "retry_count": 1
  },
  {
    "query": "취소된 진료 기록을 삭제해줘",
    "level": "Basic",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE appointment_status = '취소됨'",
    "retry_count": 1
  },
  {
    "query": "박경희 의사의 진료 시간을 매주 수요일 오후 3시에서 오후 5시로 변경해줘",
    "level": "Expert",
    "type": "UPDATE",
    "sql": "UPDATE sample SET visit_date = '2023-10-11 15:00:00' WHERE doctor_name = '박경희' AND strftime('%w', visit_date) = '3' AND strftime('%H:%M', visit_date) BETWEEN '15:00' AND '17:00'",
    "retry_count": 1
  },
  {
    "query": "환자의 주소를 최신 주소로 수정해줘",
    "level": "Advanced",
    "type": "UPDATE",
    "sql": "UPDATE sample SET notes='최신 주소' WHERE patient_id=1",
    "retry_count": 1
  },
  {
    "query": "이번 주 수요일에 예약을 추가해줘",
    "level": "Basic",
    "type": "INSERT",
    "sql": "INSERT INTO sample (created_at, updated_at, visit_date) VALUES (datetime('now'), datetime('now'), date('now', 'weekday 3'))",
    "retry_count": 1
  },
  {
    "query": "다음 주 월요일로 예정된 박민수의 예약 시간을 오후 3시로 변경해줘",
    "level": "Intermediate",
    "type": "UPDATE",
    "sql": "UPDATE sample SET visit_date = DATETIME(DATE(visit_date), '15:00:00') WHERE patient_name = '박민수' AND strftime('%Y-%m-%d', visit_date) = strftime('%Y-%m-%d', DATE('now', 'weekday 1', '+1 week'))",
    "retry_count": 1
  },
  {
    "query": "최근 1주일 내에 예약된 진료의 환자 이름과 예약 날짜를 보여줘",
    "level": "Intermediate",
    "type": "SELECT",
    "sql": "SELECT patient_name, visit_date FROM sample WHERE visit_date >= datetime('now', '-7 days')",
    "retry_count": 1
  },
  {
    "query": "새로운 환자 정보를 시스템에 등록해줘",
    "level": "Intermediate",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, patient_id, doctor_id, appointment_id, prescription_id, visit_date, diagnosis, treatment, notes, patient_name, patient_dob, patient_gender, doctor_name, specialization, appointment_status, prescription_details, billing_amount, insurance_provider, insurance_policy_number) VALUES (NULL, '2023-10-01 10:00:00', '2023-10-01 10:00:00', 1, 1, 1, 1, '2023-10-01 10:30:00', 'Flu', 'Rest and hydration', 'Patient advised to rest', 'John Doe', '1990-01-01', 'Male', 'Dr. Smith', 'General Medicine', 'Scheduled', 'Take one tablet daily', 100.00, 'Health Insurance Co.', 'INS123456')",
    "retry_count": 1
  },
  {
    "query": "특정 의사가 2023년에 작성한 처방전의 총 개수를 조회해 줘",
    "level": "Advanced",
    "type": "SELECT",
    "sql": "SELECT COUNT(prescription_id) FROM sample WHERE doctor_id = 특정_의사_ID AND strftime('%Y', visit_date) = '2023'",
    "retry_count": 5,
    "error_msg": "no such column: 특정_의사_ID"
  },
  {
    "query": "진료 기록이 없는 환자 정보를 삭제해줘",
    "level": "Expert",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE patient_id NOT IN (SELECT DISTINCT patient_id FROM sample WHERE diagnosis IS NOT NULL OR treatment IS NOT NULL)",
    "retry_count": 1
  },
  {
    "query": "의사의 전문 분야를 내과에서 소아과로 변경해줘",
    "level": "Advanced",
    "type": "UPDATE",
    "sql": "UPDATE sample SET specialization='소아과' WHERE specialization='내과'",
    "retry_count": 1
  }
]