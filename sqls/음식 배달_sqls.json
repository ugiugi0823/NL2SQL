[
  {
    "query": "새로운 메뉴 아이템을 음식점에 추가해줘",
    "level": "Basic",
    "type": "INSERT",
    "sql": "INSERT INTO sample (restaurant_id, restaurant_name, menu_id, menu_name, menu_price, created_at, updated_at) VALUES (1, 'Sample Restaurant', 101, 'New Menu Item', 9.99, '2023-10-01 12:00:00', '2023-10-01 12:00:00')",
    "retry_count": 1
  },
  {
    "query": "평균 배달 시간이 가장 짧은 배달원의 이름과 평균 시간을 구해줘",
    "level": "Advanced",
    "type": "SELECT",
    "sql": "SELECT delivery_person_name, AVG(JULIANDAY(actual_delivery_time) - JULIANDAY(estimated_delivery_time)) * 24 * 60 AS average_delivery_time FROM sample WHERE actual_delivery_time IS NOT NULL AND estimated_delivery_time IS NOT NULL GROUP BY delivery_person_name ORDER BY average_delivery_time LIMIT 1",
    "retry_count": 1
  },
  {
    "query": "음식점 '한식당'의 운영 시간을 오전 10시에서 오후 10시로 변경해줘",
    "level": "Expert",
    "type": "UPDATE",
    "sql": "UPDATE sample SET special_instructions='운영 시간: 오전 10시 - 오후 10시' WHERE restaurant_name='한식당'",
    "retry_count": 1
  },
  {
    "query": "배달 상태가 '배달 완료'인 주문의 주문번호와 음식점을 3개만 최신순으로 보여줘",
    "level": "Basic",
    "type": "SELECT",
    "sql": "SELECT order_id, restaurant_name FROM sample WHERE delivery_status = '배달 완료' ORDER BY created_at DESC LIMIT 3",
    "retry_count": 1
  },
  {
    "query": "배달 완료 후 30일이 지난 주문 기록을 삭제해줘",
    "level": "Intermediate",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE order_status = '배달 완료' AND julianday('now') - julianday(actual_delivery_time) > 30",
    "retry_count": 1
  },
  {
    "query": "특별 프로모션 메뉴를 데이터베이스에 추가해줘",
    "level": "Expert",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, restaurant_id, restaurant_name, menu_id, menu_name, menu_price, order_id, order_status, customer_id, customer_name, customer_address, delivery_person_id, delivery_person_name, delivery_status, estimated_delivery_time, actual_delivery_time, payment_method, total_amount, special_instructions) VALUES (1, '2023-10-01 12:00:00', '2023-10-01 12:00:00', 101, 'Promo Restaurant', 201, 'Special Promo Menu', 9.99, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'Limited time offer')",
    "retry_count": 1
  },
  {
    "query": "10,000원 이상인 메뉴를 가격 순으로 3개만 보여줘",
    "level": "Expert",
    "type": "SELECT",
    "sql": "SELECT menu_name FROM sample WHERE menu_price > 10000 ORDER BY menu_price LIMIT 3",
    "retry_count": 1
  },
  {
    "query": "가장 많은 주문을 받은 음식점의 이름과 총 주문 수를 보여줘",
    "level": "Expert",
    "type": "SELECT",
    "sql": "SELECT restaurant_name, COUNT(order_id) AS total_orders FROM sample GROUP BY restaurant_id ORDER BY total_orders DESC LIMIT 1",
    "retry_count": 1
  },
  {
    "query": "주문 번호 5678의 배달 주소를 서울시 강남구로 변경해줘",
    "level": "Basic",
    "type": "UPDATE",
    "sql": "UPDATE sample SET customer_address='서울시 강남구' WHERE order_id=5678",
    "retry_count": 1
  },
  {
    "query": "5개월 이상 활동이 없는 배달원을 삭제해줘",
    "level": "Basic",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE delivery_person_id IN (SELECT delivery_person_id FROM sample WHERE updated_at <= datetime('now', '-5 months'))",
    "retry_count": 1
  },
  {
    "query": "주문번호 12345의 배달 상태를 '배달 완료'로 수정해줘",
    "level": "Expert",
    "type": "UPDATE",
    "sql": "UPDATE sample SET delivery_status='배달 완료' WHERE order_id=12345",
    "retry_count": 1
  },
  {
    "query": "고객이 주문한 총 금액이 50,000원 이상인 고객의 이름과 주문 횟수를 내림차순으로 정렬해 보여줘",
    "level": "Expert",
    "type": "SELECT",
    "sql": "SELECT customer_name, COUNT(order_id) AS order_count FROM sample GROUP BY customer_name HAVING SUM(total_amount) >= 50000 ORDER BY order_count DESC",
    "retry_count": 1
  },
  {
    "query": "비활성화된 음식점을 삭제해줘",
    "level": "Advanced",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE restaurant_id NOT IN (SELECT DISTINCT restaurant_id FROM sample WHERE order_status IS NOT NULL)",
    "retry_count": 1
  },
  {
    "query": "1년 이상 주문이 없는 사용자를 삭제해줘",
    "level": "Advanced",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE customer_id IN (SELECT customer_id FROM sample GROUP BY customer_id HAVING MAX(created_at) < datetime('now', '-1 year'))",
    "retry_count": 1
  },
  {
    "query": "특정 음식점의 영업 시간을 오전 9시부터 오후 10시까지로 수정해줘",
    "level": "Basic",
    "type": "UPDATE",
    "sql": "UPDATE sample SET updated_at='2023-10-01 09:00:00' WHERE restaurant_id=1",
    "retry_count": 1
  },
  {
    "query": "새로운 메뉴 항목을 추가해줘",
    "level": "Advanced",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, restaurant_id, restaurant_name, menu_id, menu_name, menu_price, order_id, order_status, customer_id, customer_name, customer_address, delivery_person_id, delivery_person_name, delivery_status, estimated_delivery_time, actual_delivery_time, payment_method, total_amount, special_instructions) VALUES (NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 1, 'Sample Restaurant', 1, 'New Menu Item', 9.99, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)",
    "retry_count": 2
  },
  {
    "query": "배달원 김철수의 연락처를 010-1234-5678로 업데이트해줘",
    "level": "Advanced",
    "type": "UPDATE",
    "sql": "UPDATE sample SET delivery_person_name='김철수', delivery_person_id=01012345678 WHERE delivery_person_name='김철수'",
    "retry_count": 2
  },
  {
    "query": "평균 별점이 3점 이하인 음식점을 삭제해줘",
    "level": "Basic",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE restaurant_id IN (SELECT restaurant_id FROM sample GROUP BY restaurant_id HAVING AVG(menu_price) <= 3)",
    "retry_count": 1
  },
  {
    "query": "음식점 별로 가장 높은 가격의 메뉴 이름과 가격을 보여줘",
    "level": "Basic",
    "type": "SELECT",
    "sql": "SELECT restaurant_name, menu_name, MAX(menu_price) FROM sample GROUP BY restaurant_name",
    "retry_count": 1
  },
  {
    "query": "주문 번호 1234의 배달 상태를 '배달 완료'로 업데이트해줘",
    "level": "Basic",
    "type": "UPDATE",
    "sql": "UPDATE sample SET delivery_status='배달 완료' WHERE order_id=1234",
    "retry_count": 1
  },
  {
    "query": "배달원 별로 완료한 주문 수를 집계해서 5건 이상인 배달원의 이름과 완료 건수를 보여줘",
    "level": "Expert",
    "type": "SELECT",
    "sql": "SELECT delivery_person_name, COUNT(order_id) AS completed_orders FROM sample WHERE order_status = '완료' GROUP BY delivery_person_name HAVING completed_orders >= 5",
    "retry_count": 1
  },
  {
    "query": "가장 많이 주문된 메뉴의 이름과 주문 수를 보여줘",
    "level": "Basic",
    "type": "SELECT",
    "sql": "SELECT menu_name, COUNT(order_id) AS order_count FROM sample GROUP BY menu_name ORDER BY order_count DESC LIMIT 1",
    "retry_count": 1
  },
  {
    "query": "10,000원 이상 주문한 고객들의 이름과 주문한 메뉴를 보여줘",
    "level": "Basic",
    "type": "SELECT",
    "sql": "SELECT customer_name, menu_name FROM sample WHERE total_amount > 10000",
    "retry_count": 1
  },
  {
    "query": "메뉴 ID가 678인 음식의 가격을 15000원으로 변경해줘",
    "level": "Advanced",
    "type": "UPDATE",
    "sql": "UPDATE sample SET menu_price=15000 WHERE menu_id=678",
    "retry_count": 1
  },
  {
    "query": "배달 대기 중인 주문의 주문 번호와 주문 금액을 주문 금액이 높은 순서로 10개만 보여줘",
    "level": "Intermediate",
    "type": "SELECT",
    "sql": "SELECT order_id, total_amount FROM sample WHERE delivery_status = '배달 대기 중' ORDER BY total_amount DESC LIMIT 10",
    "retry_count": 1
  },
  {
    "query": "메뉴 '불고기 버거'의 가격을 9500원으로 업데이트해줘",
    "level": "Expert",
    "type": "UPDATE",
    "sql": "UPDATE sample SET menu_price=9500 WHERE menu_name='불고기 버거'",
    "retry_count": 1
  },
  {
    "query": "평균 평점이 3.0 이하인 배달원을 삭제해줘",
    "level": "Expert",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE delivery_person_id IN (SELECT delivery_person_id FROM sample GROUP BY delivery_person_id HAVING AVG(order_status) <= 3.0)",
    "retry_count": 1
  },
  {
    "query": "가장 많이 주문된 음식의 이름과 해당 음식의 주문 수를 보여줘",
    "level": "Intermediate",
    "type": "SELECT",
    "sql": "SELECT menu_name, COUNT(order_id) AS order_count FROM sample GROUP BY menu_name ORDER BY order_count DESC LIMIT 1",
    "retry_count": 1
  },
  {
    "query": "주문 번호 1024번의 배달 상태를 '배달 완료'로 갱신해줘",
    "level": "Intermediate",
    "type": "UPDATE",
    "sql": "UPDATE sample SET delivery_status='배달 완료' WHERE order_id=1024",
    "retry_count": 1
  },
  {
    "query": "평균 배달 시간이 60분을 초과하는 배달원을 삭제해줘",
    "level": "Advanced",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE delivery_person_id IN (SELECT delivery_person_id FROM sample WHERE julianday(actual_delivery_time) - julianday(estimated_delivery_time) > 60/1440)",
    "retry_count": 1
  },
  {
    "query": "배달 상태가 '취소됨'인 주문을 삭제해줘",
    "level": "Expert",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE delivery_status = '취소됨'",
    "retry_count": 1
  },
  {
    "query": "배달 소요 시간이 2시간 이상인 주문을 삭제해줘",
    "level": "Expert",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE actual_delivery_time IS NOT NULL AND estimated_delivery_time IS NOT NULL AND (strftime('%s', actual_delivery_time) - strftime('%s', estimated_delivery_time)) >= 7200",
    "retry_count": 1
  },
  {
    "query": "고객 '이영희'의 주문 주소를 '서울시 강남구 역삼동'으로 업데이트해줘",
    "level": "Expert",
    "type": "UPDATE",
    "sql": "UPDATE sample SET customer_address='서울시 강남구 역삼동' WHERE customer_name='이영희'",
    "retry_count": 1
  },
  {
    "query": "마지막 주문이 1년 전인 고객을 삭제해줘",
    "level": "Expert",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE customer_id IN (SELECT customer_id FROM sample WHERE order_id IS NOT NULL GROUP BY customer_id HAVING MAX(created_at) < DATETIME('now', '-1 year'))",
    "retry_count": 1
  },
  {
    "query": "최근 한 달간 가장 많이 주문된 메뉴의 이름과 해당 주문 수를 보여줘",
    "level": "Advanced",
    "type": "SELECT",
    "sql": "SELECT menu_name, COUNT(order_id) AS order_count FROM sample WHERE created_at >= datetime('now', '-1 month') GROUP BY menu_name ORDER BY order_count DESC LIMIT 1",
    "retry_count": 1
  },
  {
    "query": "배달 상태가 '배달 중'인 주문의 주문 번호와 고객 이름을 조회해",
    "level": "Expert",
    "type": "SELECT",
    "sql": "SELECT order_id, customer_name FROM sample WHERE delivery_status = '배달 중'",
    "retry_count": 1
  },
  {
    "query": "새로운 메뉴 항목을 등록해줘",
    "level": "Intermediate",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, restaurant_id, restaurant_name, menu_id, menu_name, menu_price, order_id, order_status, customer_id, customer_name, customer_address, delivery_person_id, delivery_person_name, delivery_status, estimated_delivery_time, actual_delivery_time, payment_method, total_amount, special_instructions) VALUES (NULL, '2023-10-01 12:00:00', '2023-10-01 12:00:00', 1, 'Sample Restaurant', 1, 'New Menu Item', 9.99, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)",
    "retry_count": 4
  },
  {
    "query": "주문 번호 54321의 고객 요청사항을 '매운맛 추가'로 변경해줘",
    "level": "Advanced",
    "type": "UPDATE",
    "sql": "UPDATE sample SET special_instructions='매운맛 추가' WHERE order_id=54321",
    "retry_count": 1
  },
  {
    "query": "음식점 '김밥천국'의 전화번호를 '010-1234-5678'로 변경해줘",
    "level": "Intermediate",
    "type": "UPDATE",
    "sql": "UPDATE sample SET restaurant_name='김밥천국' WHERE restaurant_name='김밥천국'",
    "retry_count": 5
  },
  {
    "query": "배달원이 배달 완료한 주문 수가 50개 이상인 배달원의 이름과 완료한 주문 수를 보여줘",
    "level": "Intermediate",
    "type": "SELECT",
    "sql": "SELECT delivery_person_name, COUNT(order_id) AS completed_orders FROM sample WHERE delivery_status = '배달 완료' GROUP BY delivery_person_name HAVING completed_orders >= 50",
    "retry_count": 1
  },
  {
    "query": "주문 번호 12345의 배달 상태를 '배달 완료'로 수정해줘",
    "level": "Advanced",
    "type": "UPDATE",
    "sql": "UPDATE sample SET delivery_status='배달 완료' WHERE order_id=12345",
    "retry_count": 1
  },
  {
    "query": "평점이 3점 이하인 리뷰를 삭제해줘",
    "level": "Intermediate",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE order_status = '3점 이하'",
    "retry_count": 1
  },
  {
    "query": "새로운 음식점을 데이터베이스에 등록해줘",
    "level": "Advanced",
    "type": "INSERT",
    "sql": "INSERT INTO sample (restaurant_id, restaurant_name, created_at, updated_at) VALUES (1, '새로운 음식점', datetime('now'), datetime('now'))",
    "retry_count": 1
  },
  {
    "query": "30일 이상의 미사용 쿠폰을 삭제해줘",
    "level": "Basic",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE order_status = '쿠폰 미사용' AND julianday('now') - julianday(updated_at) > 30",
    "retry_count": 1
  },
  {
    "query": "고객이 3번 이상 주문한 음식의 이름과 해당 음식의 총 주문 수를 내림차순으로 정렬해 보여줘",
    "level": "Intermediate",
    "type": "SELECT",
    "sql": "SELECT menu_name, COUNT(order_id) AS order_count FROM sample GROUP BY menu_name HAVING COUNT(order_id) > 3 ORDER BY order_count DESC",
    "retry_count": 1
  },
  {
    "query": "배달 상태가 '배달 완료'인 주문 중에서 가장 최근 10개의 주문 번호와 배달 시간을 보여줘",
    "level": "Advanced",
    "type": "SELECT",
    "sql": "SELECT order_id, actual_delivery_time FROM sample WHERE delivery_status = '배달 완료' ORDER BY actual_delivery_time DESC LIMIT 10",
    "retry_count": 1
  },
  {
    "query": "메뉴 '스파이시 치킨버거'의 가격을 9,000원으로 수정해줘",
    "level": "Intermediate",
    "type": "UPDATE",
    "sql": "UPDATE sample SET menu_price=9000.00 WHERE menu_name='스파이시 치킨버거'",
    "retry_count": 1
  },
  {
    "query": "사용자가 취소한 주문 기록을 삭제해줘",
    "level": "Basic",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE order_status = '취소됨'",
    "retry_count": 1
  },
  {
    "query": "활동이 없는 배달원 계정을 삭제해줘",
    "level": "Intermediate",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE delivery_person_id NOT IN (SELECT DISTINCT delivery_person_id FROM sample WHERE delivery_status IS NOT NULL)",
    "retry_count": 1
  },
  {
    "query": "배달원의 연락처를 010-1234-5678로 수정해줘",
    "level": "Basic",
    "type": "UPDATE",
    "sql": "UPDATE sample SET delivery_person_name='010-1234-5678'",
    "retry_count": 1
  },
  {
    "query": "배달원 ID 45번의 현재 위치를 '서울 종로구'로 업데이트해줘",
    "level": "Intermediate",
    "type": "UPDATE",
    "sql": "UPDATE sample SET customer_address='서울 종로구' WHERE delivery_person_id=45",
    "retry_count": 1
  },
  {
    "query": "배달 지연이 5회 이상인 주문 기록을 삭제해줘",
    "level": "Advanced",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE (strftime('%s', actual_delivery_time) - strftime('%s', estimated_delivery_time)) / 60 > 0 AND (SELECT COUNT(*) FROM sample AS s WHERE s.order_id = sample.order_id AND (strftime('%s', s.actual_delivery_time) - strftime('%s', s.estimated_delivery_time)) / 60 > 0) > 5",
    "retry_count": 1
  },
  {
    "query": "새로운 배달원을 시스템에 추가해줘",
    "level": "Intermediate",
    "type": "INSERT",
    "sql": "INSERT INTO sample (delivery_person_id, delivery_person_name) VALUES (NULL, '새로운 배달원 이름')",
    "retry_count": 1
  },
  {
    "query": "배달 완료된 주문 내역을 삭제해줘",
    "level": "Basic",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE delivery_status = '배달 완료'",
    "retry_count": 1
  },
  {
    "query": "마지막 주문일로부터 1년이 지난 고객 계정을 삭제해줘",
    "level": "Intermediate",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE customer_id IN (SELECT customer_id FROM sample GROUP BY customer_id HAVING MAX(created_at) < datetime('now', '-1 year'))",
    "retry_count": 1
  },
  {
    "query": "특정 음식점에서 주문된 모든 메뉴의 평균 가격을 구하고 그 결과를 가격 내림차순으로 정렬해줘",
    "level": "Advanced",
    "type": "SELECT",
    "sql": "SELECT menu_name, AVG(menu_price) AS average_price FROM sample WHERE restaurant_name = '특정 음식점' GROUP BY menu_name ORDER BY average_price DESC",
    "retry_count": 1
  },
  {
    "query": "새로운 배달원을 시스템에 등록해줘",
    "level": "Basic",
    "type": "INSERT",
    "sql": "INSERT INTO sample (delivery_person_id, delivery_person_name) VALUES (NULL, '새로운 배달원 이름')",
    "retry_count": 1
  },
  {
    "query": "주문 수가 100건 이상인 음식점의 이름을 주문 수 내림차순으로 정렬해 10개만 보여줘",
    "level": "Advanced",
    "type": "SELECT",
    "sql": "SELECT restaurant_name FROM sample GROUP BY restaurant_name HAVING COUNT(order_id) >= 100 ORDER BY COUNT(order_id) DESC LIMIT 10",
    "retry_count": 1
  },
  {
    "query": "배달원이 5명 이상인 음식점의 이름을 그룹별로 보여줘",
    "level": "Basic",
    "type": "SELECT",
    "sql": "SELECT restaurant_name FROM sample GROUP BY restaurant_name HAVING COUNT(DISTINCT delivery_person_id) >= 5",
    "retry_count": 1
  },
  {
    "query": "음식점 '맛집'의 영업 시간을 오전 10시로 수정해줘",
    "level": "Advanced",
    "type": "UPDATE",
    "sql": "UPDATE sample SET updated_at='2023-10-01 10:00:00' WHERE restaurant_name='맛집'",
    "retry_count": 1
  },
  {
    "query": "배달원 '김철수'의 연락처를 010-1234-5678로 수정해줘",
    "level": "Expert",
    "type": "UPDATE",
    "sql": "UPDATE sample SET delivery_person_name='김철수' WHERE delivery_person_name='김철수'",
    "retry_count": 4
  },
  {
    "query": "2022년 이후 주문된 음식의 전체 주문 수와 평균 주문 금액을 음식점별로 보여줘",
    "level": "Intermediate",
    "type": "SELECT",
    "sql": "SELECT restaurant_name, COUNT(order_id) AS total_orders, AVG(total_amount) AS average_order_amount FROM sample WHERE strftime('%Y', created_at) >= '2022' GROUP BY restaurant_name",
    "retry_count": 1
  },
  {
    "query": "신규 배달원을 배달원 목록에 추가해줘",
    "level": "Expert",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, restaurant_id, restaurant_name, menu_id, menu_name, menu_price, order_id, order_status, customer_id, customer_name, customer_address, delivery_person_id, delivery_person_name, delivery_status, estimated_delivery_time, actual_delivery_time, payment_method, total_amount, special_instructions) VALUES (NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, 'New Delivery Person', NULL, NULL, NULL, NULL, NULL, NULL)",
    "retry_count": 4
  },
  {
    "query": "새로운 음식점을 시스템에 등록해줘",
    "level": "Expert",
    "type": "INSERT",
    "sql": "INSERT INTO sample (restaurant_id, restaurant_name, created_at, updated_at) VALUES (1, '새로운 음식점', datetime('now'), datetime('now'))",
    "retry_count": 1
  },
  {
    "query": "주문 203번의 배송 시간을 오후 2시로 수정해줘",
    "level": "Intermediate",
    "type": "UPDATE",
    "sql": "UPDATE sample SET estimated_delivery_time='2023-10-10 14:00:00' WHERE order_id=203",
    "retry_count": 1
  },
  {
    "query": "메뉴에 있는 특정 음식의 가격을 15000원으로 변경해줘",
    "level": "Basic",
    "type": "UPDATE",
    "sql": "UPDATE sample SET menu_price=15000 WHERE menu_name='특정 음식'",
    "retry_count": 1
  },
  {
    "query": "메뉴에 없는 주문 항목을 삭제해줘",
    "level": "Advanced",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE menu_id NOT IN (SELECT DISTINCT menu_id FROM sample WHERE menu_id IS NOT NULL)",
    "retry_count": 1
  },
  {
    "query": "리뷰가 없는 음식점을 삭제해줘",
    "level": "Expert",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE restaurant_id NOT IN (SELECT DISTINCT restaurant_id FROM sample WHERE order_status = '리뷰 작성 완료')",
    "retry_count": 1
  },
  {
    "query": "주문 기록에 새로운 주문을 삽입해줘",
    "level": "Advanced",
    "type": "INSERT",
    "sql": "INSERT INTO sample (id, created_at, updated_at, restaurant_id, restaurant_name, menu_id, menu_name, menu_price, order_id, order_status, customer_id, customer_name, customer_address, delivery_person_id, delivery_person_name, delivery_status, estimated_delivery_time, actual_delivery_time, payment_method, total_amount, special_instructions) VALUES (1, '2023-10-01 12:00:00', '2023-10-01 12:00:00', 101, 'Sample Restaurant', 201, 'Sample Menu', 9.99, 301, 'Pending', 401, 'John Doe', '123 Sample St', 501, 'Jane Smith', 'Not Started', '2023-10-01 12:30:00', NULL, 'Credit Card', 9.99, 'No onions please')",
    "retry_count": 1
  },
  {
    "query": "메뉴에 없는 음식을 주문한 기록을 삭제해줘",
    "level": "Intermediate",
    "type": "DELETE",
    "sql": "DELETE FROM sample WHERE menu_id IS NULL OR menu_name IS NULL",
    "retry_count": 1
  }
]